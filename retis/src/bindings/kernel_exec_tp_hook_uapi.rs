/* automatically generated by rust-bindgen 0.72.1 */

pub type __u16 = ::std::os::raw::c_ushort;
pub type __u8 = ::std::os::raw::c_uchar;
pub type u16_ = __u16;
pub type __u32 = ::std::os::raw::c_uint;
pub type u32_ = __u32;
pub type u8_ = __u8;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct exec_event {
    pub recirc_id: u32_,
    pub action: u8_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct exec_track_event {
    pub queue_id: u32_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct exec_output {
    pub port: u32_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct exec_recirc {
    pub id: u32_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct exec_drop {
    pub reason: u32_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union exec_ip {
    pub addr4: u32_,
    pub addr6: [u8_; 16usize],
}
impl Default for exec_ip {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct exec_ct {
    pub min: exec_ip,
    pub max: exec_ip,
    pub flags: u32_,
    pub zone_id: u16_,
    pub min_port: u16_,
    pub max_port: u16_,
}
impl Default for exec_ct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
