/* automatically generated by rust-bindgen 0.72.1 */

pub type __u64 = ::std::os::raw::c_ulonglong;
pub type u64_ = __u64;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __u32 = ::std::os::raw::c_uint;
pub type u32_ = __u32;
pub type u8_ = __u8;
pub const SECTION_PACKET: skb_sections = 1;
pub const SECTION_VLAN: skb_sections = 2;
pub const SECTION_META: skb_sections = 3;
pub const SECTION_DATA_REF: skb_sections = 4;
pub const SECTION_GSO: skb_sections = 5;
pub type skb_sections = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct skb_config {
    pub sections: u64_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct skb_meta_event {
    pub len: u32_,
    pub data_len: u32_,
    pub hash: u32_,
    pub ip_summed: u8_,
    pub csum: u32_,
    pub csum_level: u8_,
    pub priority: u32_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct skb_data_ref_event {
    pub nohdr: u8_,
    pub cloned: u8_,
    pub fclone: u8_,
    pub users: u8_,
    pub dataref: u8_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct skb_gso_event {
    pub flags: u8_,
    pub nr_frags: u8_,
    pub gso_size: u32_,
    pub gso_segs: u32_,
    pub gso_type: u32_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct skb_packet_event {
    pub len: u32_,
    pub capture_len: u32_,
    pub packet: [u8_; 255usize],
}
impl Default for skb_packet_event {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
