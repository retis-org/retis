/* Generated out of:
 * pahole --compile -C sk_buff,sock,net_device,nf_conn test_data/vmlinux > skb_gen.h && \
 * bindgen --with-derive-default skb_gen.h > skb_gen.rs
 * automatically generated by rust-bindgen 0.70.1
 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        *self
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_node {
    pub __rb_parent_color: ::std::os::raw::c_ulong,
    pub rb_right: *mut rb_node,
    pub rb_left: *mut rb_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rb_node"][::std::mem::size_of::<rb_node>() - 24usize];
    ["Alignment of rb_node"][::std::mem::align_of::<rb_node>() - 8usize];
    ["Offset of field: rb_node::__rb_parent_color"]
        [::std::mem::offset_of!(rb_node, __rb_parent_color) - 0usize];
    ["Offset of field: rb_node::rb_right"][::std::mem::offset_of!(rb_node, rb_right) - 8usize];
    ["Offset of field: rb_node::rb_left"][::std::mem::offset_of!(rb_node, rb_left) - 16usize];
};
impl Default for rb_node {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct list_head {
    pub next: *mut list_head,
    pub prev: *mut list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of list_head"][::std::mem::size_of::<list_head>() - 16usize];
    ["Alignment of list_head"][::std::mem::align_of::<list_head>() - 8usize];
    ["Offset of field: list_head::next"][::std::mem::offset_of!(list_head, next) - 0usize];
    ["Offset of field: list_head::prev"][::std::mem::offset_of!(list_head, prev) - 8usize];
};
impl Default for list_head {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llist_node {
    pub next: *mut llist_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llist_node"][::std::mem::size_of::<llist_node>() - 8usize];
    ["Alignment of llist_node"][::std::mem::align_of::<llist_node>() - 8usize];
    ["Offset of field: llist_node::next"][::std::mem::offset_of!(llist_node, next) - 0usize];
};
impl Default for llist_node {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __s64 = ::std::os::raw::c_longlong;
pub type s64 = __s64;
pub type ktime_t = s64;
pub type __u64 = ::std::os::raw::c_ulonglong;
pub type u64_ = __u64;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __u32 = ::std::os::raw::c_uint;
pub type __wsum = __u32;
pub type u32_ = __u32;
pub type __be16 = __u16;
pub type u16_ = __u16;
pub type sk_buff_data_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct atomic_t {
    pub counter: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of atomic_t"][::std::mem::size_of::<atomic_t>() - 4usize];
    ["Alignment of atomic_t"][::std::mem::align_of::<atomic_t>() - 4usize];
    ["Offset of field: atomic_t::counter"][::std::mem::offset_of!(atomic_t, counter) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct refcount_struct {
    pub refs: atomic_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of refcount_struct"][::std::mem::size_of::<refcount_struct>() - 4usize];
    ["Alignment of refcount_struct"][::std::mem::align_of::<refcount_struct>() - 4usize];
    ["Offset of field: refcount_struct::refs"]
        [::std::mem::offset_of!(refcount_struct, refs) - 0usize];
};
pub type refcount_t = refcount_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct skb_ext {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct sk_buff {
    pub __bindgen_anon_1: sk_buff__bindgen_ty_1,
    pub __bindgen_anon_2: sk_buff__bindgen_ty_2,
    pub __bindgen_anon_3: sk_buff__bindgen_ty_3,
    pub cb: [::std::os::raw::c_char; 48usize],
    pub __bindgen_anon_4: sk_buff__bindgen_ty_4,
    pub _nfct: ::std::os::raw::c_ulong,
    pub len: ::std::os::raw::c_uint,
    pub data_len: ::std::os::raw::c_uint,
    pub mac_len: __u16,
    pub hdr_len: __u16,
    pub queue_mapping: __u16,
    pub __cloned_offset: __IncompleteArrayField<__u8>,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub active_extensions: __u8,
    pub __bindgen_anon_5: sk_buff__bindgen_ty_5,
    pub tail: sk_buff_data_t,
    pub end: sk_buff_data_t,
    pub head: *mut ::std::os::raw::c_uchar,
    pub data: *mut ::std::os::raw::c_uchar,
    pub truesize: ::std::os::raw::c_uint,
    pub users: refcount_t,
    pub extensions: *mut skb_ext,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_1 {
    pub __bindgen_anon_1: sk_buff__bindgen_ty_1__bindgen_ty_1,
    pub rbnode: rb_node,
    pub list: list_head,
    pub ll_node: llist_node,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sk_buff__bindgen_ty_1__bindgen_ty_1 {
    pub next: *mut sk_buff,
    pub prev: *mut sk_buff,
    pub __bindgen_anon_1: sk_buff__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub dev: *mut net_device,
    pub dev_scratch: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<sk_buff__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of sk_buff__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: sk_buff__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::dev"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1, dev) - 0usize];
    ["Offset of field: sk_buff__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::dev_scratch"][::std::mem::offset_of!(
        sk_buff__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        dev_scratch
    ) - 0usize];
};
impl Default for sk_buff__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<sk_buff__bindgen_ty_1__bindgen_ty_1>() - 24usize];
    ["Alignment of sk_buff__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: sk_buff__bindgen_ty_1__bindgen_ty_1::next"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_1__bindgen_ty_1, next) - 0usize];
    ["Offset of field: sk_buff__bindgen_ty_1__bindgen_ty_1::prev"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_1__bindgen_ty_1, prev) - 8usize];
};
impl Default for sk_buff__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_1"][::std::mem::size_of::<sk_buff__bindgen_ty_1>() - 24usize];
    ["Alignment of sk_buff__bindgen_ty_1"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_1>() - 8usize];
    ["Offset of field: sk_buff__bindgen_ty_1::rbnode"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_1, rbnode) - 0usize];
    ["Offset of field: sk_buff__bindgen_ty_1::list"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_1, list) - 0usize];
    ["Offset of field: sk_buff__bindgen_ty_1::ll_node"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_1, ll_node) - 0usize];
};
impl Default for sk_buff__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_2 {
    pub sk: *mut sock,
    pub ip_defrag_offset: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_2"][::std::mem::size_of::<sk_buff__bindgen_ty_2>() - 8usize];
    ["Alignment of sk_buff__bindgen_ty_2"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_2>() - 8usize];
    ["Offset of field: sk_buff__bindgen_ty_2::sk"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_2, sk) - 0usize];
    ["Offset of field: sk_buff__bindgen_ty_2::ip_defrag_offset"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_2, ip_defrag_offset) - 0usize];
};
impl Default for sk_buff__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_3 {
    pub tstamp: ktime_t,
    pub skb_mstamp_ns: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_3"][::std::mem::size_of::<sk_buff__bindgen_ty_3>() - 8usize];
    ["Alignment of sk_buff__bindgen_ty_3"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_3>() - 8usize];
    ["Offset of field: sk_buff__bindgen_ty_3::tstamp"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_3, tstamp) - 0usize];
    ["Offset of field: sk_buff__bindgen_ty_3::skb_mstamp_ns"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_3, skb_mstamp_ns) - 0usize];
};
impl Default for sk_buff__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_4 {
    pub __bindgen_anon_1: sk_buff__bindgen_ty_4__bindgen_ty_1,
    pub tcp_tsorted_anchor: list_head,
    pub _sk_redir: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sk_buff__bindgen_ty_4__bindgen_ty_1 {
    pub _skb_refdst: ::std::os::raw::c_ulong,
    pub destructor: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sk_buff)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_4__bindgen_ty_1"]
        [::std::mem::size_of::<sk_buff__bindgen_ty_4__bindgen_ty_1>() - 16usize];
    ["Alignment of sk_buff__bindgen_ty_4__bindgen_ty_1"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_4__bindgen_ty_1>() - 8usize];
    ["Offset of field: sk_buff__bindgen_ty_4__bindgen_ty_1::_skb_refdst"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_4__bindgen_ty_1, _skb_refdst) - 0usize];
    ["Offset of field: sk_buff__bindgen_ty_4__bindgen_ty_1::destructor"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_4__bindgen_ty_1, destructor) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_4"][::std::mem::size_of::<sk_buff__bindgen_ty_4>() - 16usize];
    ["Alignment of sk_buff__bindgen_ty_4"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_4>() - 8usize];
    ["Offset of field: sk_buff__bindgen_ty_4::tcp_tsorted_anchor"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_4, tcp_tsorted_anchor) - 0usize];
    ["Offset of field: sk_buff__bindgen_ty_4::_sk_redir"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_4, _sk_redir) - 0usize];
};
impl Default for sk_buff__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct sk_buff__bindgen_ty_5 {
    pub __bindgen_anon_1: __BindgenUnionField<sk_buff__bindgen_ty_5__bindgen_ty_1>,
    pub headers: __BindgenUnionField<sk_buff__bindgen_ty_5__bindgen_ty_2>,
    pub bindgen_union_field: [u32; 15usize],
}
#[repr(C)]
pub struct sk_buff__bindgen_ty_5__bindgen_ty_1 {
    pub __pkt_type_offset: __IncompleteArrayField<__u8>,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __pkt_vlan_present_offset: __IncompleteArrayField<__u8>,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub tc_index: __u16,
    pub __bindgen_anon_1: sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub priority: __u32,
    pub skb_iif: ::std::os::raw::c_int,
    pub hash: __u32,
    pub __bindgen_anon_2: sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
    pub alloc_cpu: u16_,
    pub secmark: __u32,
    pub __bindgen_anon_4: sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_4,
    pub __bindgen_anon_5: sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_5,
    pub inner_transport_header: __u16,
    pub inner_network_header: __u16,
    pub inner_mac_header: __u16,
    pub protocol: __be16,
    pub transport_header: __u16,
    pub network_header: __u16,
    pub mac_header: __u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub csum: __wsum,
    pub __bindgen_anon_1: sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub csum_start: __u16,
    pub csum_offset: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()
            - 2usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::csum_start"] [:: std :: mem :: offset_of ! (sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 , csum_start) - 0usize] ;
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::csum_offset"] [:: std :: mem :: offset_of ! (sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 , csum_offset) - 2usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1::csum"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1, csum) - 0usize];
};
impl Default for sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2 {
    pub vlan_all: u32_,
    pub __bindgen_anon_1: sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub vlan_proto: __be16,
    pub vlan_tci: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1"][::std::mem::size_of::<
        sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>()
            - 2usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1::vlan_proto"] [:: std :: mem :: offset_of ! (sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 , vlan_proto) - 0usize] ;
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1::vlan_tci"] [:: std :: mem :: offset_of ! (sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 , vlan_tci) - 2usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Alignment of sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2::vlan_all"][::std::mem::offset_of!(
        sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
        vlan_all
    ) - 0usize];
};
impl Default for sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3 {
    pub napi_id: ::std::os::raw::c_uint,
    pub sender_cpu: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3>() - 4usize];
    ["Alignment of sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3>() - 4usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3::napi_id"][::std::mem::offset_of!(
        sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
        napi_id
    ) - 0usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3::sender_cpu"][::std::mem::offset_of!(
        sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
        sender_cpu
    ) - 0usize];
};
impl Default for sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_4 {
    pub mark: __u32,
    pub reserved_tailroom: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_4>() - 4usize];
    ["Alignment of sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_4>() - 4usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_4::mark"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_4, mark) - 0usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_4::reserved_tailroom"][::std::mem::offset_of!(
        sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_4,
        reserved_tailroom
    )
        - 0usize];
};
impl Default for sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_5 {
    pub inner_protocol: __be16,
    pub inner_ipproto: __u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::size_of::<sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_5>() - 2usize];
    ["Alignment of sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_5>() - 2usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_5::inner_protocol"][::std::mem::offset_of!(
        sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_5,
        inner_protocol
    )
        - 0usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_5::inner_ipproto"][::std::mem::offset_of!(
        sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_5,
        inner_ipproto
    )
        - 0usize];
};
impl Default for sk_buff__bindgen_ty_5__bindgen_ty_1__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_5__bindgen_ty_1"]
        [::std::mem::size_of::<sk_buff__bindgen_ty_5__bindgen_ty_1>() - 60usize];
    ["Alignment of sk_buff__bindgen_ty_5__bindgen_ty_1"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_5__bindgen_ty_1>() - 4usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1::__pkt_type_offset"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_1, __pkt_type_offset) - 0usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1::__pkt_vlan_present_offset"][::std::mem::offset_of!(
        sk_buff__bindgen_ty_5__bindgen_ty_1,
        __pkt_vlan_present_offset
    ) - 2usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1::tc_index"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_1, tc_index) - 6usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1::priority"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_1, priority) - 12usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1::skb_iif"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_1, skb_iif) - 16usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1::hash"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_1, hash) - 20usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1::alloc_cpu"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_1, alloc_cpu) - 32usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1::secmark"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_1, secmark) - 36usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1::inner_transport_header"][::std::mem::offset_of!(
        sk_buff__bindgen_ty_5__bindgen_ty_1,
        inner_transport_header
    ) - 46usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1::inner_network_header"][::std::mem::offset_of!(
        sk_buff__bindgen_ty_5__bindgen_ty_1,
        inner_network_header
    ) - 48usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1::inner_mac_header"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_1, inner_mac_header) - 50usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1::protocol"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_1, protocol) - 52usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1::transport_header"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_1, transport_header) - 54usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1::network_header"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_1, network_header) - 56usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_1::mac_header"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_1, mac_header) - 58usize];
};
impl Default for sk_buff__bindgen_ty_5__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl sk_buff__bindgen_ty_5__bindgen_ty_1 {
    #[inline]
    pub fn pkt_type(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_pkt_type(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn ignore_df(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ignore_df(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nf_trace(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_nf_trace(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ip_summed(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_ip_summed(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn ooo_okay(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ooo_okay(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn l4_hash(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_l4_hash(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sw_hash(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_sw_hash(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wifi_acked_valid(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wifi_acked_valid(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wifi_acked(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wifi_acked(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_fcs(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_fcs(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn encapsulation(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_encapsulation(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn encap_hdr_csum(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_encap_hdr_csum(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn csum_valid(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_csum_valid(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pkt_type: __u8,
        ignore_df: __u8,
        nf_trace: __u8,
        ip_summed: __u8,
        ooo_okay: __u8,
        l4_hash: __u8,
        sw_hash: __u8,
        wifi_acked_valid: __u8,
        wifi_acked: __u8,
        no_fcs: __u8,
        encapsulation: __u8,
        encap_hdr_csum: __u8,
        csum_valid: __u8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let pkt_type: u8 = unsafe { ::std::mem::transmute(pkt_type) };
            pkt_type as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ignore_df: u8 = unsafe { ::std::mem::transmute(ignore_df) };
            ignore_df as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let nf_trace: u8 = unsafe { ::std::mem::transmute(nf_trace) };
            nf_trace as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let ip_summed: u8 = unsafe { ::std::mem::transmute(ip_summed) };
            ip_summed as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let ooo_okay: u8 = unsafe { ::std::mem::transmute(ooo_okay) };
            ooo_okay as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let l4_hash: u8 = unsafe { ::std::mem::transmute(l4_hash) };
            l4_hash as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let sw_hash: u8 = unsafe { ::std::mem::transmute(sw_hash) };
            sw_hash as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let wifi_acked_valid: u8 = unsafe { ::std::mem::transmute(wifi_acked_valid) };
            wifi_acked_valid as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let wifi_acked: u8 = unsafe { ::std::mem::transmute(wifi_acked) };
            wifi_acked as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let no_fcs: u8 = unsafe { ::std::mem::transmute(no_fcs) };
            no_fcs as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let encapsulation: u8 = unsafe { ::std::mem::transmute(encapsulation) };
            encapsulation as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let encap_hdr_csum: u8 = unsafe { ::std::mem::transmute(encap_hdr_csum) };
            encap_hdr_csum as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let csum_valid: u8 = unsafe { ::std::mem::transmute(csum_valid) };
            csum_valid as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn remcsum_offload(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_remcsum_offload(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn csum_complete_sw(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_csum_complete_sw(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn csum_level(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_csum_level(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn dst_pending_confirm(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dst_pending_confirm(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mono_delivery_time(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mono_delivery_time(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tc_skip_classify(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tc_skip_classify(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tc_at_ingress(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tc_at_ingress(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ndisc_nodetype(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(8usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_ndisc_nodetype(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn ipvs_property(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ipvs_property(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn inner_protocol_type(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_inner_protocol_type(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn offload_fwd_mark(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_offload_fwd_mark(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn offload_l3_fwd_mark(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_offload_l3_fwd_mark(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn redirected(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(14usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_redirected(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn from_ingress(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_from_ingress(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nf_skip_egress(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(16usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_nf_skip_egress(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn decrypted(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(17usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_decrypted(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slow_gro(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(18usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_slow_gro(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn csum_not_inet(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(19usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_csum_not_inet(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn scm_io_uring(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(20usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_scm_io_uring(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        remcsum_offload: __u8,
        csum_complete_sw: __u8,
        csum_level: __u8,
        dst_pending_confirm: __u8,
        mono_delivery_time: __u8,
        tc_skip_classify: __u8,
        tc_at_ingress: __u8,
        ndisc_nodetype: __u8,
        ipvs_property: __u8,
        inner_protocol_type: __u8,
        offload_fwd_mark: __u8,
        offload_l3_fwd_mark: __u8,
        redirected: __u8,
        from_ingress: __u8,
        nf_skip_egress: __u8,
        decrypted: __u8,
        slow_gro: __u8,
        csum_not_inet: __u8,
        scm_io_uring: __u8,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let remcsum_offload: u8 = unsafe { ::std::mem::transmute(remcsum_offload) };
            remcsum_offload as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let csum_complete_sw: u8 = unsafe { ::std::mem::transmute(csum_complete_sw) };
            csum_complete_sw as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let csum_level: u8 = unsafe { ::std::mem::transmute(csum_level) };
            csum_level as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let dst_pending_confirm: u8 = unsafe { ::std::mem::transmute(dst_pending_confirm) };
            dst_pending_confirm as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let mono_delivery_time: u8 = unsafe { ::std::mem::transmute(mono_delivery_time) };
            mono_delivery_time as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let tc_skip_classify: u8 = unsafe { ::std::mem::transmute(tc_skip_classify) };
            tc_skip_classify as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tc_at_ingress: u8 = unsafe { ::std::mem::transmute(tc_at_ingress) };
            tc_at_ingress as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let ndisc_nodetype: u8 = unsafe { ::std::mem::transmute(ndisc_nodetype) };
            ndisc_nodetype as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let ipvs_property: u8 = unsafe { ::std::mem::transmute(ipvs_property) };
            ipvs_property as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let inner_protocol_type: u8 = unsafe { ::std::mem::transmute(inner_protocol_type) };
            inner_protocol_type as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let offload_fwd_mark: u8 = unsafe { ::std::mem::transmute(offload_fwd_mark) };
            offload_fwd_mark as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let offload_l3_fwd_mark: u8 = unsafe { ::std::mem::transmute(offload_l3_fwd_mark) };
            offload_l3_fwd_mark as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let redirected: u8 = unsafe { ::std::mem::transmute(redirected) };
            redirected as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let from_ingress: u8 = unsafe { ::std::mem::transmute(from_ingress) };
            from_ingress as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let nf_skip_egress: u8 = unsafe { ::std::mem::transmute(nf_skip_egress) };
            nf_skip_egress as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let decrypted: u8 = unsafe { ::std::mem::transmute(decrypted) };
            decrypted as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let slow_gro: u8 = unsafe { ::std::mem::transmute(slow_gro) };
            slow_gro as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let csum_not_inet: u8 = unsafe { ::std::mem::transmute(csum_not_inet) };
            csum_not_inet as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let scm_io_uring: u8 = unsafe { ::std::mem::transmute(scm_io_uring) };
            scm_io_uring as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct sk_buff__bindgen_ty_5__bindgen_ty_2 {
    pub __pkt_type_offset: __IncompleteArrayField<__u8>,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __pkt_vlan_present_offset: __IncompleteArrayField<__u8>,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub tc_index: __u16,
    pub __bindgen_anon_1: sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_1,
    pub priority: __u32,
    pub skb_iif: ::std::os::raw::c_int,
    pub hash: __u32,
    pub __bindgen_anon_2: sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_2,
    pub __bindgen_anon_3: sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_3,
    pub alloc_cpu: u16_,
    pub secmark: __u32,
    pub __bindgen_anon_4: sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_4,
    pub __bindgen_anon_5: sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_5,
    pub inner_transport_header: __u16,
    pub inner_network_header: __u16,
    pub inner_mac_header: __u16,
    pub protocol: __be16,
    pub transport_header: __u16,
    pub network_header: __u16,
    pub mac_header: __u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_1 {
    pub csum: __wsum,
    pub __bindgen_anon_1: sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 {
    pub csum_start: __u16,
    pub csum_offset: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1>()
            - 2usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1::csum_start"] [:: std :: mem :: offset_of ! (sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 , csum_start) - 0usize] ;
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1::csum_offset"] [:: std :: mem :: offset_of ! (sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 , csum_offset) - 2usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_1>() - 4usize];
    ["Alignment of sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_1>() - 4usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_1::csum"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_1, csum) - 0usize];
};
impl Default for sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_2 {
    pub vlan_all: u32_,
    pub __bindgen_anon_1: sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1 {
    pub vlan_proto: __be16,
    pub vlan_tci: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1"][::std::mem::size_of::<
        sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1>()
            - 2usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1::vlan_proto"] [:: std :: mem :: offset_of ! (sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1 , vlan_proto) - 0usize] ;
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1::vlan_tci"] [:: std :: mem :: offset_of ! (sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1 , vlan_tci) - 2usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_2"]
        [::std::mem::size_of::<sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_2>() - 4usize];
    ["Alignment of sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_2"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_2>() - 4usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_2::vlan_all"][::std::mem::offset_of!(
        sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_2,
        vlan_all
    ) - 0usize];
};
impl Default for sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_3 {
    pub napi_id: ::std::os::raw::c_uint,
    pub sender_cpu: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_3"]
        [::std::mem::size_of::<sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_3>() - 4usize];
    ["Alignment of sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_3"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_3>() - 4usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_3::napi_id"][::std::mem::offset_of!(
        sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_3,
        napi_id
    ) - 0usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_3::sender_cpu"][::std::mem::offset_of!(
        sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_3,
        sender_cpu
    ) - 0usize];
};
impl Default for sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_4 {
    pub mark: __u32,
    pub reserved_tailroom: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_4"]
        [::std::mem::size_of::<sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_4>() - 4usize];
    ["Alignment of sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_4"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_4>() - 4usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_4::mark"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_4, mark) - 0usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_4::reserved_tailroom"][::std::mem::offset_of!(
        sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_4,
        reserved_tailroom
    )
        - 0usize];
};
impl Default for sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_5 {
    pub inner_protocol: __be16,
    pub inner_ipproto: __u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_5"]
        [::std::mem::size_of::<sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_5>() - 2usize];
    ["Alignment of sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_5"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_5>() - 2usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_5::inner_protocol"][::std::mem::offset_of!(
        sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_5,
        inner_protocol
    )
        - 0usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_5::inner_ipproto"][::std::mem::offset_of!(
        sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_5,
        inner_ipproto
    )
        - 0usize];
};
impl Default for sk_buff__bindgen_ty_5__bindgen_ty_2__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_5__bindgen_ty_2"]
        [::std::mem::size_of::<sk_buff__bindgen_ty_5__bindgen_ty_2>() - 60usize];
    ["Alignment of sk_buff__bindgen_ty_5__bindgen_ty_2"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_5__bindgen_ty_2>() - 4usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2::__pkt_type_offset"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_2, __pkt_type_offset) - 0usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2::__pkt_vlan_present_offset"][::std::mem::offset_of!(
        sk_buff__bindgen_ty_5__bindgen_ty_2,
        __pkt_vlan_present_offset
    ) - 2usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2::tc_index"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_2, tc_index) - 6usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2::priority"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_2, priority) - 12usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2::skb_iif"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_2, skb_iif) - 16usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2::hash"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_2, hash) - 20usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2::alloc_cpu"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_2, alloc_cpu) - 32usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2::secmark"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_2, secmark) - 36usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2::inner_transport_header"][::std::mem::offset_of!(
        sk_buff__bindgen_ty_5__bindgen_ty_2,
        inner_transport_header
    ) - 46usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2::inner_network_header"][::std::mem::offset_of!(
        sk_buff__bindgen_ty_5__bindgen_ty_2,
        inner_network_header
    ) - 48usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2::inner_mac_header"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_2, inner_mac_header) - 50usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2::protocol"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_2, protocol) - 52usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2::transport_header"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_2, transport_header) - 54usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2::network_header"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_2, network_header) - 56usize];
    ["Offset of field: sk_buff__bindgen_ty_5__bindgen_ty_2::mac_header"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5__bindgen_ty_2, mac_header) - 58usize];
};
impl Default for sk_buff__bindgen_ty_5__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl sk_buff__bindgen_ty_5__bindgen_ty_2 {
    #[inline]
    pub fn pkt_type(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_pkt_type(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn ignore_df(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ignore_df(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nf_trace(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_nf_trace(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ip_summed(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_ip_summed(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn ooo_okay(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ooo_okay(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn l4_hash(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_l4_hash(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sw_hash(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_sw_hash(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wifi_acked_valid(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wifi_acked_valid(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wifi_acked(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wifi_acked(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_fcs(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_fcs(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn encapsulation(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_encapsulation(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn encap_hdr_csum(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_encap_hdr_csum(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn csum_valid(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_csum_valid(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pkt_type: __u8,
        ignore_df: __u8,
        nf_trace: __u8,
        ip_summed: __u8,
        ooo_okay: __u8,
        l4_hash: __u8,
        sw_hash: __u8,
        wifi_acked_valid: __u8,
        wifi_acked: __u8,
        no_fcs: __u8,
        encapsulation: __u8,
        encap_hdr_csum: __u8,
        csum_valid: __u8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let pkt_type: u8 = unsafe { ::std::mem::transmute(pkt_type) };
            pkt_type as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ignore_df: u8 = unsafe { ::std::mem::transmute(ignore_df) };
            ignore_df as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let nf_trace: u8 = unsafe { ::std::mem::transmute(nf_trace) };
            nf_trace as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let ip_summed: u8 = unsafe { ::std::mem::transmute(ip_summed) };
            ip_summed as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let ooo_okay: u8 = unsafe { ::std::mem::transmute(ooo_okay) };
            ooo_okay as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let l4_hash: u8 = unsafe { ::std::mem::transmute(l4_hash) };
            l4_hash as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let sw_hash: u8 = unsafe { ::std::mem::transmute(sw_hash) };
            sw_hash as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let wifi_acked_valid: u8 = unsafe { ::std::mem::transmute(wifi_acked_valid) };
            wifi_acked_valid as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let wifi_acked: u8 = unsafe { ::std::mem::transmute(wifi_acked) };
            wifi_acked as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let no_fcs: u8 = unsafe { ::std::mem::transmute(no_fcs) };
            no_fcs as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let encapsulation: u8 = unsafe { ::std::mem::transmute(encapsulation) };
            encapsulation as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let encap_hdr_csum: u8 = unsafe { ::std::mem::transmute(encap_hdr_csum) };
            encap_hdr_csum as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let csum_valid: u8 = unsafe { ::std::mem::transmute(csum_valid) };
            csum_valid as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn remcsum_offload(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_remcsum_offload(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn csum_complete_sw(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_csum_complete_sw(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn csum_level(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_csum_level(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn dst_pending_confirm(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dst_pending_confirm(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mono_delivery_time(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mono_delivery_time(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tc_skip_classify(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tc_skip_classify(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tc_at_ingress(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tc_at_ingress(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ndisc_nodetype(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(8usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_ndisc_nodetype(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn ipvs_property(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ipvs_property(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn inner_protocol_type(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_inner_protocol_type(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn offload_fwd_mark(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_offload_fwd_mark(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn offload_l3_fwd_mark(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_offload_l3_fwd_mark(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn redirected(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(14usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_redirected(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn from_ingress(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_from_ingress(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nf_skip_egress(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(16usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_nf_skip_egress(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn decrypted(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(17usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_decrypted(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slow_gro(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(18usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_slow_gro(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn csum_not_inet(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(19usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_csum_not_inet(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn scm_io_uring(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(20usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_scm_io_uring(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        remcsum_offload: __u8,
        csum_complete_sw: __u8,
        csum_level: __u8,
        dst_pending_confirm: __u8,
        mono_delivery_time: __u8,
        tc_skip_classify: __u8,
        tc_at_ingress: __u8,
        ndisc_nodetype: __u8,
        ipvs_property: __u8,
        inner_protocol_type: __u8,
        offload_fwd_mark: __u8,
        offload_l3_fwd_mark: __u8,
        redirected: __u8,
        from_ingress: __u8,
        nf_skip_egress: __u8,
        decrypted: __u8,
        slow_gro: __u8,
        csum_not_inet: __u8,
        scm_io_uring: __u8,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let remcsum_offload: u8 = unsafe { ::std::mem::transmute(remcsum_offload) };
            remcsum_offload as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let csum_complete_sw: u8 = unsafe { ::std::mem::transmute(csum_complete_sw) };
            csum_complete_sw as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let csum_level: u8 = unsafe { ::std::mem::transmute(csum_level) };
            csum_level as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let dst_pending_confirm: u8 = unsafe { ::std::mem::transmute(dst_pending_confirm) };
            dst_pending_confirm as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let mono_delivery_time: u8 = unsafe { ::std::mem::transmute(mono_delivery_time) };
            mono_delivery_time as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let tc_skip_classify: u8 = unsafe { ::std::mem::transmute(tc_skip_classify) };
            tc_skip_classify as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tc_at_ingress: u8 = unsafe { ::std::mem::transmute(tc_at_ingress) };
            tc_at_ingress as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let ndisc_nodetype: u8 = unsafe { ::std::mem::transmute(ndisc_nodetype) };
            ndisc_nodetype as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let ipvs_property: u8 = unsafe { ::std::mem::transmute(ipvs_property) };
            ipvs_property as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let inner_protocol_type: u8 = unsafe { ::std::mem::transmute(inner_protocol_type) };
            inner_protocol_type as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let offload_fwd_mark: u8 = unsafe { ::std::mem::transmute(offload_fwd_mark) };
            offload_fwd_mark as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let offload_l3_fwd_mark: u8 = unsafe { ::std::mem::transmute(offload_l3_fwd_mark) };
            offload_l3_fwd_mark as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let redirected: u8 = unsafe { ::std::mem::transmute(redirected) };
            redirected as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let from_ingress: u8 = unsafe { ::std::mem::transmute(from_ingress) };
            from_ingress as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let nf_skip_egress: u8 = unsafe { ::std::mem::transmute(nf_skip_egress) };
            nf_skip_egress as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let decrypted: u8 = unsafe { ::std::mem::transmute(decrypted) };
            decrypted as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let slow_gro: u8 = unsafe { ::std::mem::transmute(slow_gro) };
            slow_gro as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let csum_not_inet: u8 = unsafe { ::std::mem::transmute(csum_not_inet) };
            csum_not_inet as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let scm_io_uring: u8 = unsafe { ::std::mem::transmute(scm_io_uring) };
            scm_io_uring as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff__bindgen_ty_5"][::std::mem::size_of::<sk_buff__bindgen_ty_5>() - 60usize];
    ["Alignment of sk_buff__bindgen_ty_5"]
        [::std::mem::align_of::<sk_buff__bindgen_ty_5>() - 4usize];
    ["Offset of field: sk_buff__bindgen_ty_5::headers"]
        [::std::mem::offset_of!(sk_buff__bindgen_ty_5, headers) - 0usize];
};
impl Default for sk_buff__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff"][::std::mem::size_of::<sk_buff>() - 232usize];
    ["Alignment of sk_buff"][::std::mem::align_of::<sk_buff>() - 8usize];
    ["Offset of field: sk_buff::cb"][::std::mem::offset_of!(sk_buff, cb) - 40usize];
    ["Offset of field: sk_buff::_nfct"][::std::mem::offset_of!(sk_buff, _nfct) - 104usize];
    ["Offset of field: sk_buff::len"][::std::mem::offset_of!(sk_buff, len) - 112usize];
    ["Offset of field: sk_buff::data_len"][::std::mem::offset_of!(sk_buff, data_len) - 116usize];
    ["Offset of field: sk_buff::mac_len"][::std::mem::offset_of!(sk_buff, mac_len) - 120usize];
    ["Offset of field: sk_buff::hdr_len"][::std::mem::offset_of!(sk_buff, hdr_len) - 122usize];
    ["Offset of field: sk_buff::queue_mapping"]
        [::std::mem::offset_of!(sk_buff, queue_mapping) - 124usize];
    ["Offset of field: sk_buff::__cloned_offset"]
        [::std::mem::offset_of!(sk_buff, __cloned_offset) - 126usize];
    ["Offset of field: sk_buff::active_extensions"]
        [::std::mem::offset_of!(sk_buff, active_extensions) - 127usize];
    ["Offset of field: sk_buff::tail"][::std::mem::offset_of!(sk_buff, tail) - 188usize];
    ["Offset of field: sk_buff::end"][::std::mem::offset_of!(sk_buff, end) - 192usize];
    ["Offset of field: sk_buff::head"][::std::mem::offset_of!(sk_buff, head) - 200usize];
    ["Offset of field: sk_buff::data"][::std::mem::offset_of!(sk_buff, data) - 208usize];
    ["Offset of field: sk_buff::truesize"][::std::mem::offset_of!(sk_buff, truesize) - 216usize];
    ["Offset of field: sk_buff::users"][::std::mem::offset_of!(sk_buff, users) - 220usize];
    ["Offset of field: sk_buff::extensions"]
        [::std::mem::offset_of!(sk_buff, extensions) - 224usize];
};
impl Default for sk_buff {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl sk_buff {
    #[inline]
    pub fn cloned(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_cloned(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nohdr(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_nohdr(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fclone(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_fclone(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn peeked(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_peeked(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn head_frag(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_head_frag(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pfmemalloc(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pfmemalloc(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pp_recycle(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pp_recycle(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        cloned: __u8,
        nohdr: __u8,
        fclone: __u8,
        peeked: __u8,
        head_frag: __u8,
        pfmemalloc: __u8,
        pp_recycle: __u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let cloned: u8 = unsafe { ::std::mem::transmute(cloned) };
            cloned as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let nohdr: u8 = unsafe { ::std::mem::transmute(nohdr) };
            nohdr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let fclone: u8 = unsafe { ::std::mem::transmute(fclone) };
            fclone as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let peeked: u8 = unsafe { ::std::mem::transmute(peeked) };
            peeked as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let head_frag: u8 = unsafe { ::std::mem::transmute(head_frag) };
            head_frag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let pfmemalloc: u8 = unsafe { ::std::mem::transmute(pfmemalloc) };
            pfmemalloc as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pp_recycle: u8 = unsafe { ::std::mem::transmute(pp_recycle) };
            pp_recycle as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __addrpair = __u64;
pub type __be32 = __u32;
pub type __portpair = __u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hlist_node {
    pub next: *mut hlist_node,
    pub pprev: *mut *mut hlist_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hlist_node"][::std::mem::size_of::<hlist_node>() - 16usize];
    ["Alignment of hlist_node"][::std::mem::align_of::<hlist_node>() - 8usize];
    ["Offset of field: hlist_node::next"][::std::mem::offset_of!(hlist_node, next) - 0usize];
    ["Offset of field: hlist_node::pprev"][::std::mem::offset_of!(hlist_node, pprev) - 8usize];
};
impl Default for hlist_node {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proto {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct net {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct possible_net_t {
    pub net: *mut net,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of possible_net_t"][::std::mem::size_of::<possible_net_t>() - 8usize];
    ["Alignment of possible_net_t"][::std::mem::align_of::<possible_net_t>() - 8usize];
    ["Offset of field: possible_net_t::net"][::std::mem::offset_of!(possible_net_t, net) - 0usize];
};
impl Default for possible_net_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub u6_addr8: [__u8; 16usize],
    pub u6_addr16: [__be16; 8usize],
    pub u6_addr32: [__be32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr__bindgen_ty_1"][::std::mem::size_of::<in6_addr__bindgen_ty_1>() - 16usize];
    ["Alignment of in6_addr__bindgen_ty_1"]
        [::std::mem::align_of::<in6_addr__bindgen_ty_1>() - 4usize];
    ["Offset of field: in6_addr__bindgen_ty_1::u6_addr8"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, u6_addr8) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::u6_addr16"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, u6_addr16) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::u6_addr32"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, u6_addr32) - 0usize];
};
impl Default for in6_addr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr"][::std::mem::size_of::<in6_addr>() - 16usize];
    ["Alignment of in6_addr"][::std::mem::align_of::<in6_addr>() - 4usize];
    ["Offset of field: in6_addr::in6_u"][::std::mem::offset_of!(in6_addr, in6_u) - 0usize];
};
impl Default for in6_addr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct atomic64_t {
    pub counter: s64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of atomic64_t"][::std::mem::size_of::<atomic64_t>() - 8usize];
    ["Alignment of atomic64_t"][::std::mem::align_of::<atomic64_t>() - 8usize];
    ["Offset of field: atomic64_t::counter"][::std::mem::offset_of!(atomic64_t, counter) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inet_timewait_death_row {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hlist_nulls_node {
    pub next: *mut hlist_nulls_node,
    pub pprev: *mut *mut hlist_nulls_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hlist_nulls_node"][::std::mem::size_of::<hlist_nulls_node>() - 16usize];
    ["Alignment of hlist_nulls_node"][::std::mem::align_of::<hlist_nulls_node>() - 8usize];
    ["Offset of field: hlist_nulls_node::next"]
        [::std::mem::offset_of!(hlist_nulls_node, next) - 0usize];
    ["Offset of field: hlist_nulls_node::pprev"]
        [::std::mem::offset_of!(hlist_nulls_node, pprev) - 8usize];
};
impl Default for hlist_nulls_node {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct sock_common {
    pub __bindgen_anon_1: sock_common__bindgen_ty_1,
    pub __bindgen_anon_2: sock_common__bindgen_ty_2,
    pub __bindgen_anon_3: sock_common__bindgen_ty_3,
    pub skc_family: ::std::os::raw::c_ushort,
    pub skc_state: ::std::os::raw::c_uchar,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub skc_bound_dev_if: ::std::os::raw::c_int,
    pub __bindgen_anon_4: sock_common__bindgen_ty_4,
    pub skc_prot: *mut proto,
    pub skc_net: possible_net_t,
    pub skc_v6_daddr: in6_addr,
    pub skc_v6_rcv_saddr: in6_addr,
    pub skc_cookie: atomic64_t,
    pub __bindgen_anon_5: sock_common__bindgen_ty_5,
    pub skc_dontcopy_begin: __IncompleteArrayField<::std::os::raw::c_int>,
    pub __bindgen_anon_6: sock_common__bindgen_ty_6,
    pub skc_tx_queue_mapping: ::std::os::raw::c_ushort,
    pub skc_rx_queue_mapping: ::std::os::raw::c_ushort,
    pub __bindgen_anon_7: sock_common__bindgen_ty_7,
    pub skc_refcnt: refcount_t,
    pub skc_dontcopy_end: __IncompleteArrayField<::std::os::raw::c_int>,
    pub __bindgen_anon_8: sock_common__bindgen_ty_8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sock_common__bindgen_ty_1 {
    pub skc_addrpair: __addrpair,
    pub __bindgen_anon_1: sock_common__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sock_common__bindgen_ty_1__bindgen_ty_1 {
    pub skc_daddr: __be32,
    pub skc_rcv_saddr: __be32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sock_common__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<sock_common__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of sock_common__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<sock_common__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: sock_common__bindgen_ty_1__bindgen_ty_1::skc_daddr"]
        [::std::mem::offset_of!(sock_common__bindgen_ty_1__bindgen_ty_1, skc_daddr) - 0usize];
    ["Offset of field: sock_common__bindgen_ty_1__bindgen_ty_1::skc_rcv_saddr"]
        [::std::mem::offset_of!(sock_common__bindgen_ty_1__bindgen_ty_1, skc_rcv_saddr) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sock_common__bindgen_ty_1"]
        [::std::mem::size_of::<sock_common__bindgen_ty_1>() - 8usize];
    ["Alignment of sock_common__bindgen_ty_1"]
        [::std::mem::align_of::<sock_common__bindgen_ty_1>() - 8usize];
    ["Offset of field: sock_common__bindgen_ty_1::skc_addrpair"]
        [::std::mem::offset_of!(sock_common__bindgen_ty_1, skc_addrpair) - 0usize];
};
impl Default for sock_common__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sock_common__bindgen_ty_2 {
    pub skc_hash: ::std::os::raw::c_uint,
    pub skc_u16hashes: [__u16; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sock_common__bindgen_ty_2"]
        [::std::mem::size_of::<sock_common__bindgen_ty_2>() - 4usize];
    ["Alignment of sock_common__bindgen_ty_2"]
        [::std::mem::align_of::<sock_common__bindgen_ty_2>() - 4usize];
    ["Offset of field: sock_common__bindgen_ty_2::skc_hash"]
        [::std::mem::offset_of!(sock_common__bindgen_ty_2, skc_hash) - 0usize];
    ["Offset of field: sock_common__bindgen_ty_2::skc_u16hashes"]
        [::std::mem::offset_of!(sock_common__bindgen_ty_2, skc_u16hashes) - 0usize];
};
impl Default for sock_common__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sock_common__bindgen_ty_3 {
    pub skc_portpair: __portpair,
    pub __bindgen_anon_1: sock_common__bindgen_ty_3__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sock_common__bindgen_ty_3__bindgen_ty_1 {
    pub skc_dport: __be16,
    pub skc_num: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sock_common__bindgen_ty_3__bindgen_ty_1"]
        [::std::mem::size_of::<sock_common__bindgen_ty_3__bindgen_ty_1>() - 4usize];
    ["Alignment of sock_common__bindgen_ty_3__bindgen_ty_1"]
        [::std::mem::align_of::<sock_common__bindgen_ty_3__bindgen_ty_1>() - 2usize];
    ["Offset of field: sock_common__bindgen_ty_3__bindgen_ty_1::skc_dport"]
        [::std::mem::offset_of!(sock_common__bindgen_ty_3__bindgen_ty_1, skc_dport) - 0usize];
    ["Offset of field: sock_common__bindgen_ty_3__bindgen_ty_1::skc_num"]
        [::std::mem::offset_of!(sock_common__bindgen_ty_3__bindgen_ty_1, skc_num) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sock_common__bindgen_ty_3"]
        [::std::mem::size_of::<sock_common__bindgen_ty_3>() - 4usize];
    ["Alignment of sock_common__bindgen_ty_3"]
        [::std::mem::align_of::<sock_common__bindgen_ty_3>() - 4usize];
    ["Offset of field: sock_common__bindgen_ty_3::skc_portpair"]
        [::std::mem::offset_of!(sock_common__bindgen_ty_3, skc_portpair) - 0usize];
};
impl Default for sock_common__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sock_common__bindgen_ty_4 {
    pub skc_bind_node: hlist_node,
    pub skc_portaddr_node: hlist_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sock_common__bindgen_ty_4"]
        [::std::mem::size_of::<sock_common__bindgen_ty_4>() - 16usize];
    ["Alignment of sock_common__bindgen_ty_4"]
        [::std::mem::align_of::<sock_common__bindgen_ty_4>() - 8usize];
    ["Offset of field: sock_common__bindgen_ty_4::skc_bind_node"]
        [::std::mem::offset_of!(sock_common__bindgen_ty_4, skc_bind_node) - 0usize];
    ["Offset of field: sock_common__bindgen_ty_4::skc_portaddr_node"]
        [::std::mem::offset_of!(sock_common__bindgen_ty_4, skc_portaddr_node) - 0usize];
};
impl Default for sock_common__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sock_common__bindgen_ty_5 {
    pub skc_flags: ::std::os::raw::c_ulong,
    pub skc_listener: *mut sock,
    pub skc_tw_dr: *mut inet_timewait_death_row,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sock_common__bindgen_ty_5"]
        [::std::mem::size_of::<sock_common__bindgen_ty_5>() - 8usize];
    ["Alignment of sock_common__bindgen_ty_5"]
        [::std::mem::align_of::<sock_common__bindgen_ty_5>() - 8usize];
    ["Offset of field: sock_common__bindgen_ty_5::skc_flags"]
        [::std::mem::offset_of!(sock_common__bindgen_ty_5, skc_flags) - 0usize];
    ["Offset of field: sock_common__bindgen_ty_5::skc_listener"]
        [::std::mem::offset_of!(sock_common__bindgen_ty_5, skc_listener) - 0usize];
    ["Offset of field: sock_common__bindgen_ty_5::skc_tw_dr"]
        [::std::mem::offset_of!(sock_common__bindgen_ty_5, skc_tw_dr) - 0usize];
};
impl Default for sock_common__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sock_common__bindgen_ty_6 {
    pub skc_node: hlist_node,
    pub skc_nulls_node: hlist_nulls_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sock_common__bindgen_ty_6"]
        [::std::mem::size_of::<sock_common__bindgen_ty_6>() - 16usize];
    ["Alignment of sock_common__bindgen_ty_6"]
        [::std::mem::align_of::<sock_common__bindgen_ty_6>() - 8usize];
    ["Offset of field: sock_common__bindgen_ty_6::skc_node"]
        [::std::mem::offset_of!(sock_common__bindgen_ty_6, skc_node) - 0usize];
    ["Offset of field: sock_common__bindgen_ty_6::skc_nulls_node"]
        [::std::mem::offset_of!(sock_common__bindgen_ty_6, skc_nulls_node) - 0usize];
};
impl Default for sock_common__bindgen_ty_6 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sock_common__bindgen_ty_7 {
    pub skc_incoming_cpu: ::std::os::raw::c_int,
    pub skc_rcv_wnd: u32_,
    pub skc_tw_rcv_nxt: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sock_common__bindgen_ty_7"]
        [::std::mem::size_of::<sock_common__bindgen_ty_7>() - 4usize];
    ["Alignment of sock_common__bindgen_ty_7"]
        [::std::mem::align_of::<sock_common__bindgen_ty_7>() - 4usize];
    ["Offset of field: sock_common__bindgen_ty_7::skc_incoming_cpu"]
        [::std::mem::offset_of!(sock_common__bindgen_ty_7, skc_incoming_cpu) - 0usize];
    ["Offset of field: sock_common__bindgen_ty_7::skc_rcv_wnd"]
        [::std::mem::offset_of!(sock_common__bindgen_ty_7, skc_rcv_wnd) - 0usize];
    ["Offset of field: sock_common__bindgen_ty_7::skc_tw_rcv_nxt"]
        [::std::mem::offset_of!(sock_common__bindgen_ty_7, skc_tw_rcv_nxt) - 0usize];
};
impl Default for sock_common__bindgen_ty_7 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sock_common__bindgen_ty_8 {
    pub skc_rxhash: u32_,
    pub skc_window_clamp: u32_,
    pub skc_tw_snd_nxt: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sock_common__bindgen_ty_8"]
        [::std::mem::size_of::<sock_common__bindgen_ty_8>() - 4usize];
    ["Alignment of sock_common__bindgen_ty_8"]
        [::std::mem::align_of::<sock_common__bindgen_ty_8>() - 4usize];
    ["Offset of field: sock_common__bindgen_ty_8::skc_rxhash"]
        [::std::mem::offset_of!(sock_common__bindgen_ty_8, skc_rxhash) - 0usize];
    ["Offset of field: sock_common__bindgen_ty_8::skc_window_clamp"]
        [::std::mem::offset_of!(sock_common__bindgen_ty_8, skc_window_clamp) - 0usize];
    ["Offset of field: sock_common__bindgen_ty_8::skc_tw_snd_nxt"]
        [::std::mem::offset_of!(sock_common__bindgen_ty_8, skc_tw_snd_nxt) - 0usize];
};
impl Default for sock_common__bindgen_ty_8 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sock_common"][::std::mem::size_of::<sock_common>() - 136usize];
    ["Alignment of sock_common"][::std::mem::align_of::<sock_common>() - 8usize];
    ["Offset of field: sock_common::skc_family"]
        [::std::mem::offset_of!(sock_common, skc_family) - 16usize];
    ["Offset of field: sock_common::skc_state"]
        [::std::mem::offset_of!(sock_common, skc_state) - 18usize];
    ["Offset of field: sock_common::skc_bound_dev_if"]
        [::std::mem::offset_of!(sock_common, skc_bound_dev_if) - 20usize];
    ["Offset of field: sock_common::skc_prot"]
        [::std::mem::offset_of!(sock_common, skc_prot) - 40usize];
    ["Offset of field: sock_common::skc_net"]
        [::std::mem::offset_of!(sock_common, skc_net) - 48usize];
    ["Offset of field: sock_common::skc_v6_daddr"]
        [::std::mem::offset_of!(sock_common, skc_v6_daddr) - 56usize];
    ["Offset of field: sock_common::skc_v6_rcv_saddr"]
        [::std::mem::offset_of!(sock_common, skc_v6_rcv_saddr) - 72usize];
    ["Offset of field: sock_common::skc_cookie"]
        [::std::mem::offset_of!(sock_common, skc_cookie) - 88usize];
    ["Offset of field: sock_common::skc_dontcopy_begin"]
        [::std::mem::offset_of!(sock_common, skc_dontcopy_begin) - 104usize];
    ["Offset of field: sock_common::skc_tx_queue_mapping"]
        [::std::mem::offset_of!(sock_common, skc_tx_queue_mapping) - 120usize];
    ["Offset of field: sock_common::skc_rx_queue_mapping"]
        [::std::mem::offset_of!(sock_common, skc_rx_queue_mapping) - 122usize];
    ["Offset of field: sock_common::skc_refcnt"]
        [::std::mem::offset_of!(sock_common, skc_refcnt) - 128usize];
    ["Offset of field: sock_common::skc_dontcopy_end"]
        [::std::mem::offset_of!(sock_common, skc_dontcopy_end) - 132usize];
};
impl Default for sock_common {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl sock_common {
    #[inline]
    pub fn skc_reuse(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_skc_reuse(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn skc_reuseport(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_skc_reuseport(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn skc_ipv6only(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_skc_ipv6only(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn skc_net_refcnt(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_skc_net_refcnt(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        skc_reuse: ::std::os::raw::c_uchar,
        skc_reuseport: ::std::os::raw::c_uchar,
        skc_ipv6only: ::std::os::raw::c_uchar,
        skc_net_refcnt: ::std::os::raw::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let skc_reuse: u8 = unsafe { ::std::mem::transmute(skc_reuse) };
            skc_reuse as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let skc_reuseport: u8 = unsafe { ::std::mem::transmute(skc_reuseport) };
            skc_reuseport as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let skc_ipv6only: u8 = unsafe { ::std::mem::transmute(skc_ipv6only) };
            skc_ipv6only as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let skc_net_refcnt: u8 = unsafe { ::std::mem::transmute(skc_net_refcnt) };
            skc_net_refcnt as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dst_entry {
    _unused: [u8; 0],
}
pub type u8_ = __u8;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct qspinlock {
    pub __bindgen_anon_1: qspinlock__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union qspinlock__bindgen_ty_1 {
    pub val: atomic_t,
    pub __bindgen_anon_1: qspinlock__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: qspinlock__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct qspinlock__bindgen_ty_1__bindgen_ty_1 {
    pub locked: u8_,
    pub pending: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qspinlock__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<qspinlock__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Alignment of qspinlock__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<qspinlock__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: qspinlock__bindgen_ty_1__bindgen_ty_1::locked"]
        [::std::mem::offset_of!(qspinlock__bindgen_ty_1__bindgen_ty_1, locked) - 0usize];
    ["Offset of field: qspinlock__bindgen_ty_1__bindgen_ty_1::pending"]
        [::std::mem::offset_of!(qspinlock__bindgen_ty_1__bindgen_ty_1, pending) - 1usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct qspinlock__bindgen_ty_1__bindgen_ty_2 {
    pub locked_pending: u16_,
    pub tail: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qspinlock__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<qspinlock__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Alignment of qspinlock__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<qspinlock__bindgen_ty_1__bindgen_ty_2>() - 2usize];
    ["Offset of field: qspinlock__bindgen_ty_1__bindgen_ty_2::locked_pending"]
        [::std::mem::offset_of!(qspinlock__bindgen_ty_1__bindgen_ty_2, locked_pending) - 0usize];
    ["Offset of field: qspinlock__bindgen_ty_1__bindgen_ty_2::tail"]
        [::std::mem::offset_of!(qspinlock__bindgen_ty_1__bindgen_ty_2, tail) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qspinlock__bindgen_ty_1"][::std::mem::size_of::<qspinlock__bindgen_ty_1>() - 4usize];
    ["Alignment of qspinlock__bindgen_ty_1"]
        [::std::mem::align_of::<qspinlock__bindgen_ty_1>() - 4usize];
    ["Offset of field: qspinlock__bindgen_ty_1::val"]
        [::std::mem::offset_of!(qspinlock__bindgen_ty_1, val) - 0usize];
};
impl Default for qspinlock__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qspinlock"][::std::mem::size_of::<qspinlock>() - 4usize];
    ["Alignment of qspinlock"][::std::mem::align_of::<qspinlock>() - 4usize];
};
impl Default for qspinlock {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type arch_spinlock_t = qspinlock;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct raw_spinlock {
    pub raw_lock: arch_spinlock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of raw_spinlock"][::std::mem::size_of::<raw_spinlock>() - 4usize];
    ["Alignment of raw_spinlock"][::std::mem::align_of::<raw_spinlock>() - 4usize];
    ["Offset of field: raw_spinlock::raw_lock"]
        [::std::mem::offset_of!(raw_spinlock, raw_lock) - 0usize];
};
impl Default for raw_spinlock {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct spinlock {
    pub __bindgen_anon_1: spinlock__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spinlock__bindgen_ty_1 {
    pub rlock: raw_spinlock,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of spinlock__bindgen_ty_1"][::std::mem::size_of::<spinlock__bindgen_ty_1>() - 4usize];
    ["Alignment of spinlock__bindgen_ty_1"]
        [::std::mem::align_of::<spinlock__bindgen_ty_1>() - 4usize];
    ["Offset of field: spinlock__bindgen_ty_1::rlock"]
        [::std::mem::offset_of!(spinlock__bindgen_ty_1, rlock) - 0usize];
};
impl Default for spinlock__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of spinlock"][::std::mem::size_of::<spinlock>() - 4usize];
    ["Alignment of spinlock"][::std::mem::align_of::<spinlock>() - 4usize];
};
impl Default for spinlock {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type spinlock_t = spinlock;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wait_queue_head {
    pub lock: spinlock_t,
    pub head: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait_queue_head"][::std::mem::size_of::<wait_queue_head>() - 24usize];
    ["Alignment of wait_queue_head"][::std::mem::align_of::<wait_queue_head>() - 8usize];
    ["Offset of field: wait_queue_head::lock"]
        [::std::mem::offset_of!(wait_queue_head, lock) - 0usize];
    ["Offset of field: wait_queue_head::head"]
        [::std::mem::offset_of!(wait_queue_head, head) - 8usize];
};
impl Default for wait_queue_head {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type wait_queue_head_t = wait_queue_head;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct socket_lock_t {
    pub slock: spinlock_t,
    pub owned: ::std::os::raw::c_int,
    pub wq: wait_queue_head_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of socket_lock_t"][::std::mem::size_of::<socket_lock_t>() - 32usize];
    ["Alignment of socket_lock_t"][::std::mem::align_of::<socket_lock_t>() - 8usize];
    ["Offset of field: socket_lock_t::slock"]
        [::std::mem::offset_of!(socket_lock_t, slock) - 0usize];
    ["Offset of field: socket_lock_t::owned"]
        [::std::mem::offset_of!(socket_lock_t, owned) - 4usize];
    ["Offset of field: socket_lock_t::wq"][::std::mem::offset_of!(socket_lock_t, wq) - 8usize];
};
impl Default for socket_lock_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sk_buff_list {
    pub next: *mut sk_buff,
    pub prev: *mut sk_buff,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff_list"][::std::mem::size_of::<sk_buff_list>() - 16usize];
    ["Alignment of sk_buff_list"][::std::mem::align_of::<sk_buff_list>() - 8usize];
    ["Offset of field: sk_buff_list::next"][::std::mem::offset_of!(sk_buff_list, next) - 0usize];
    ["Offset of field: sk_buff_list::prev"][::std::mem::offset_of!(sk_buff_list, prev) - 8usize];
};
impl Default for sk_buff_list {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sk_buff_head {
    pub __bindgen_anon_1: sk_buff_head__bindgen_ty_1,
    pub qlen: __u32,
    pub lock: spinlock_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff_head__bindgen_ty_1 {
    pub __bindgen_anon_1: sk_buff_head__bindgen_ty_1__bindgen_ty_1,
    pub list: sk_buff_list,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sk_buff_head__bindgen_ty_1__bindgen_ty_1 {
    pub next: *mut sk_buff,
    pub prev: *mut sk_buff,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff_head__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<sk_buff_head__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of sk_buff_head__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<sk_buff_head__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: sk_buff_head__bindgen_ty_1__bindgen_ty_1::next"]
        [::std::mem::offset_of!(sk_buff_head__bindgen_ty_1__bindgen_ty_1, next) - 0usize];
    ["Offset of field: sk_buff_head__bindgen_ty_1__bindgen_ty_1::prev"]
        [::std::mem::offset_of!(sk_buff_head__bindgen_ty_1__bindgen_ty_1, prev) - 8usize];
};
impl Default for sk_buff_head__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff_head__bindgen_ty_1"]
        [::std::mem::size_of::<sk_buff_head__bindgen_ty_1>() - 16usize];
    ["Alignment of sk_buff_head__bindgen_ty_1"]
        [::std::mem::align_of::<sk_buff_head__bindgen_ty_1>() - 8usize];
    ["Offset of field: sk_buff_head__bindgen_ty_1::list"]
        [::std::mem::offset_of!(sk_buff_head__bindgen_ty_1, list) - 0usize];
};
impl Default for sk_buff_head__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sk_buff_head"][::std::mem::size_of::<sk_buff_head>() - 24usize];
    ["Alignment of sk_buff_head"][::std::mem::align_of::<sk_buff_head>() - 8usize];
    ["Offset of field: sk_buff_head::qlen"][::std::mem::offset_of!(sk_buff_head, qlen) - 16usize];
    ["Offset of field: sk_buff_head::lock"][::std::mem::offset_of!(sk_buff_head, lock) - 20usize];
};
impl Default for sk_buff_head {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sk_filter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct socket_wq {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xfrm_policy {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_root {
    pub rb_node: *mut rb_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rb_root"][::std::mem::size_of::<rb_root>() - 8usize];
    ["Alignment of rb_root"][::std::mem::align_of::<rb_root>() - 8usize];
    ["Offset of field: rb_root::rb_node"][::std::mem::offset_of!(rb_root, rb_node) - 0usize];
};
impl Default for rb_root {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __s32 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timer_list {
    pub entry: hlist_node,
    pub expires: ::std::os::raw::c_ulong,
    pub function: ::std::option::Option<unsafe extern "C" fn(arg1: *mut timer_list)>,
    pub flags: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timer_list"][::std::mem::size_of::<timer_list>() - 40usize];
    ["Alignment of timer_list"][::std::mem::align_of::<timer_list>() - 8usize];
    ["Offset of field: timer_list::entry"][::std::mem::offset_of!(timer_list, entry) - 0usize];
    ["Offset of field: timer_list::expires"][::std::mem::offset_of!(timer_list, expires) - 16usize];
    ["Offset of field: timer_list::function"]
        [::std::mem::offset_of!(timer_list, function) - 24usize];
    ["Offset of field: timer_list::flags"][::std::mem::offset_of!(timer_list, flags) - 32usize];
};
impl Default for timer_list {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct page {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct page_frag {
    pub page: *mut page,
    pub offset: __u32,
    pub size: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page_frag"][::std::mem::size_of::<page_frag>() - 16usize];
    ["Alignment of page_frag"][::std::mem::align_of::<page_frag>() - 8usize];
    ["Offset of field: page_frag::page"][::std::mem::offset_of!(page_frag, page) - 0usize];
    ["Offset of field: page_frag::offset"][::std::mem::offset_of!(page_frag, offset) - 8usize];
    ["Offset of field: page_frag::size"][::std::mem::offset_of!(page_frag, size) - 12usize];
};
impl Default for page_frag {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type netdev_features_t = u64_;
pub type gfp_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct qrwlock {
    pub __bindgen_anon_1: qrwlock__bindgen_ty_1,
    pub wait_lock: arch_spinlock_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union qrwlock__bindgen_ty_1 {
    pub cnts: atomic_t,
    pub __bindgen_anon_1: qrwlock__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct qrwlock__bindgen_ty_1__bindgen_ty_1 {
    pub wlocked: u8_,
    pub __lstate: [u8_; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qrwlock__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<qrwlock__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of qrwlock__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<qrwlock__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: qrwlock__bindgen_ty_1__bindgen_ty_1::wlocked"]
        [::std::mem::offset_of!(qrwlock__bindgen_ty_1__bindgen_ty_1, wlocked) - 0usize];
    ["Offset of field: qrwlock__bindgen_ty_1__bindgen_ty_1::__lstate"]
        [::std::mem::offset_of!(qrwlock__bindgen_ty_1__bindgen_ty_1, __lstate) - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qrwlock__bindgen_ty_1"][::std::mem::size_of::<qrwlock__bindgen_ty_1>() - 4usize];
    ["Alignment of qrwlock__bindgen_ty_1"]
        [::std::mem::align_of::<qrwlock__bindgen_ty_1>() - 4usize];
    ["Offset of field: qrwlock__bindgen_ty_1::cnts"]
        [::std::mem::offset_of!(qrwlock__bindgen_ty_1, cnts) - 0usize];
};
impl Default for qrwlock__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qrwlock"][::std::mem::size_of::<qrwlock>() - 8usize];
    ["Alignment of qrwlock"][::std::mem::align_of::<qrwlock>() - 4usize];
    ["Offset of field: qrwlock::wait_lock"][::std::mem::offset_of!(qrwlock, wait_lock) - 4usize];
};
impl Default for qrwlock {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type arch_rwlock_t = qrwlock;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rwlock_t {
    pub raw_lock: arch_rwlock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rwlock_t"][::std::mem::size_of::<rwlock_t>() - 8usize];
    ["Alignment of rwlock_t"][::std::mem::align_of::<rwlock_t>() - 4usize];
    ["Offset of field: rwlock_t::raw_lock"][::std::mem::offset_of!(rwlock_t, raw_lock) - 0usize];
};
impl Default for rwlock_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type uid_t = __kernel_uid32_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct kuid_t {
    pub val: uid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kuid_t"][::std::mem::size_of::<kuid_t>() - 4usize];
    ["Alignment of kuid_t"][::std::mem::align_of::<kuid_t>() - 4usize];
    ["Offset of field: kuid_t::val"][::std::mem::offset_of!(kuid_t, val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pid {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cred {
    _unused: [u8; 0],
}
pub type bool_ = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct socket {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cgroup {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sock_cgroup_data {
    pub cgroup: *mut cgroup,
    pub classid: u32_,
    pub prioidx: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sock_cgroup_data"][::std::mem::size_of::<sock_cgroup_data>() - 16usize];
    ["Alignment of sock_cgroup_data"][::std::mem::align_of::<sock_cgroup_data>() - 8usize];
    ["Offset of field: sock_cgroup_data::cgroup"]
        [::std::mem::offset_of!(sock_cgroup_data, cgroup) - 0usize];
    ["Offset of field: sock_cgroup_data::classid"]
        [::std::mem::offset_of!(sock_cgroup_data, classid) - 8usize];
    ["Offset of field: sock_cgroup_data::prioidx"]
        [::std::mem::offset_of!(sock_cgroup_data, prioidx) - 12usize];
};
impl Default for sock_cgroup_data {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mem_cgroup {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sock_reuseport {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_local_storage {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct callback_head {
    pub next: *mut callback_head,
    pub func: ::std::option::Option<unsafe extern "C" fn(arg1: *mut callback_head)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of callback_head"][::std::mem::size_of::<callback_head>() - 16usize];
    ["Alignment of callback_head"][::std::mem::align_of::<callback_head>() - 8usize];
    ["Offset of field: callback_head::next"][::std::mem::offset_of!(callback_head, next) - 0usize];
    ["Offset of field: callback_head::func"][::std::mem::offset_of!(callback_head, func) - 8usize];
};
impl Default for callback_head {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct netns_tracker {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of netns_tracker"][::std::mem::size_of::<netns_tracker>() - 0usize];
    ["Alignment of netns_tracker"][::std::mem::align_of::<netns_tracker>() - 1usize];
};
#[repr(C)]
pub struct sock {
    pub __sk_common: sock_common,
    pub sk_rx_dst: *mut dst_entry,
    pub sk_rx_dst_ifindex: ::std::os::raw::c_int,
    pub sk_rx_dst_cookie: u32_,
    pub sk_lock: socket_lock_t,
    pub sk_drops: atomic_t,
    pub sk_rcvlowat: ::std::os::raw::c_int,
    pub sk_error_queue: sk_buff_head,
    pub sk_receive_queue: sk_buff_head,
    pub sk_backlog: sock__bindgen_ty_1,
    pub sk_forward_alloc: ::std::os::raw::c_int,
    pub sk_reserved_mem: u32_,
    pub sk_ll_usec: ::std::os::raw::c_uint,
    pub sk_napi_id: ::std::os::raw::c_uint,
    pub sk_rcvbuf: ::std::os::raw::c_int,
    pub sk_filter: *mut sk_filter,
    pub __bindgen_anon_1: sock__bindgen_ty_2,
    pub sk_policy: [*mut xfrm_policy; 2usize],
    pub sk_dst_cache: *mut dst_entry,
    pub sk_omem_alloc: atomic_t,
    pub sk_sndbuf: ::std::os::raw::c_int,
    pub sk_wmem_queued: ::std::os::raw::c_int,
    pub sk_wmem_alloc: refcount_t,
    pub sk_tsq_flags: ::std::os::raw::c_ulong,
    pub __bindgen_anon_2: sock__bindgen_ty_3,
    pub sk_write_queue: sk_buff_head,
    pub sk_peek_off: __s32,
    pub sk_write_pending: ::std::os::raw::c_int,
    pub sk_dst_pending_confirm: __u32,
    pub sk_pacing_status: u32_,
    pub sk_sndtimeo: ::std::os::raw::c_long,
    pub sk_timer: timer_list,
    pub sk_priority: __u32,
    pub sk_mark: __u32,
    pub sk_pacing_rate: ::std::os::raw::c_ulong,
    pub sk_max_pacing_rate: ::std::os::raw::c_ulong,
    pub sk_frag: page_frag,
    pub sk_route_caps: netdev_features_t,
    pub sk_gso_type: ::std::os::raw::c_int,
    pub sk_gso_max_size: ::std::os::raw::c_uint,
    pub sk_allocation: gfp_t,
    pub sk_txhash: __u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub sk_pacing_shift: u8_,
    pub sk_type: u16_,
    pub sk_protocol: u16_,
    pub sk_gso_max_segs: u16_,
    pub sk_lingertime: ::std::os::raw::c_ulong,
    pub sk_prot_creator: *mut proto,
    pub sk_callback_lock: rwlock_t,
    pub sk_err: ::std::os::raw::c_int,
    pub sk_err_soft: ::std::os::raw::c_int,
    pub sk_ack_backlog: u32_,
    pub sk_max_ack_backlog: u32_,
    pub sk_uid: kuid_t,
    pub sk_txrehash: u8_,
    pub sk_prefer_busy_poll: u8_,
    pub sk_busy_poll_budget: u16_,
    pub sk_peer_lock: spinlock_t,
    pub sk_bind_phc: ::std::os::raw::c_int,
    pub sk_peer_pid: *mut pid,
    pub sk_peer_cred: *const cred,
    pub sk_rcvtimeo: ::std::os::raw::c_long,
    pub sk_stamp: ktime_t,
    pub sk_tskey: atomic_t,
    pub sk_zckey: atomic_t,
    pub sk_tsflags: u32_,
    pub sk_shutdown: u8_,
    pub sk_clockid: u8_,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub sk_use_task_frag: bool_,
    pub sk_socket: *mut socket,
    pub sk_user_data: *mut ::std::os::raw::c_void,
    pub sk_security: *mut ::std::os::raw::c_void,
    pub sk_cgrp_data: sock_cgroup_data,
    pub sk_memcg: *mut mem_cgroup,
    pub sk_state_change: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sock)>,
    pub sk_data_ready: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sock)>,
    pub sk_write_space: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sock)>,
    pub sk_error_report: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sock)>,
    pub sk_backlog_rcv: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sock, arg2: *mut sk_buff) -> ::std::os::raw::c_int,
    >,
    pub sk_validate_xmit_skb: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sock,
            arg2: *mut net_device,
            arg3: *mut sk_buff,
        ) -> *mut sk_buff,
    >,
    pub sk_destruct: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sock)>,
    pub sk_reuseport_cb: *mut sock_reuseport,
    pub sk_bpf_storage: *mut bpf_local_storage,
    pub sk_rcu: callback_head,
    pub ns_tracker: netns_tracker,
    pub sk_bind2_node: hlist_node,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sock__bindgen_ty_1 {
    pub rmem_alloc: atomic_t,
    pub len: ::std::os::raw::c_int,
    pub head: *mut sk_buff,
    pub tail: *mut sk_buff,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sock__bindgen_ty_1"][::std::mem::size_of::<sock__bindgen_ty_1>() - 24usize];
    ["Alignment of sock__bindgen_ty_1"][::std::mem::align_of::<sock__bindgen_ty_1>() - 8usize];
    ["Offset of field: sock__bindgen_ty_1::rmem_alloc"]
        [::std::mem::offset_of!(sock__bindgen_ty_1, rmem_alloc) - 0usize];
    ["Offset of field: sock__bindgen_ty_1::len"]
        [::std::mem::offset_of!(sock__bindgen_ty_1, len) - 4usize];
    ["Offset of field: sock__bindgen_ty_1::head"]
        [::std::mem::offset_of!(sock__bindgen_ty_1, head) - 8usize];
    ["Offset of field: sock__bindgen_ty_1::tail"]
        [::std::mem::offset_of!(sock__bindgen_ty_1, tail) - 16usize];
};
impl Default for sock__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sock__bindgen_ty_2 {
    pub sk_wq: *mut socket_wq,
    pub sk_wq_raw: *mut socket_wq,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sock__bindgen_ty_2"][::std::mem::size_of::<sock__bindgen_ty_2>() - 8usize];
    ["Alignment of sock__bindgen_ty_2"][::std::mem::align_of::<sock__bindgen_ty_2>() - 8usize];
    ["Offset of field: sock__bindgen_ty_2::sk_wq"]
        [::std::mem::offset_of!(sock__bindgen_ty_2, sk_wq) - 0usize];
    ["Offset of field: sock__bindgen_ty_2::sk_wq_raw"]
        [::std::mem::offset_of!(sock__bindgen_ty_2, sk_wq_raw) - 0usize];
};
impl Default for sock__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sock__bindgen_ty_3 {
    pub sk_send_head: *mut sk_buff,
    pub tcp_rtx_queue: rb_root,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sock__bindgen_ty_3"][::std::mem::size_of::<sock__bindgen_ty_3>() - 8usize];
    ["Alignment of sock__bindgen_ty_3"][::std::mem::align_of::<sock__bindgen_ty_3>() - 8usize];
    ["Offset of field: sock__bindgen_ty_3::sk_send_head"]
        [::std::mem::offset_of!(sock__bindgen_ty_3, sk_send_head) - 0usize];
    ["Offset of field: sock__bindgen_ty_3::tcp_rtx_queue"]
        [::std::mem::offset_of!(sock__bindgen_ty_3, tcp_rtx_queue) - 0usize];
};
impl Default for sock__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sock"][::std::mem::size_of::<sock>() - 776usize];
    ["Alignment of sock"][::std::mem::align_of::<sock>() - 8usize];
    ["Offset of field: sock::__sk_common"][::std::mem::offset_of!(sock, __sk_common) - 0usize];
    ["Offset of field: sock::sk_rx_dst"][::std::mem::offset_of!(sock, sk_rx_dst) - 136usize];
    ["Offset of field: sock::sk_rx_dst_ifindex"]
        [::std::mem::offset_of!(sock, sk_rx_dst_ifindex) - 144usize];
    ["Offset of field: sock::sk_rx_dst_cookie"]
        [::std::mem::offset_of!(sock, sk_rx_dst_cookie) - 148usize];
    ["Offset of field: sock::sk_lock"][::std::mem::offset_of!(sock, sk_lock) - 152usize];
    ["Offset of field: sock::sk_drops"][::std::mem::offset_of!(sock, sk_drops) - 184usize];
    ["Offset of field: sock::sk_rcvlowat"][::std::mem::offset_of!(sock, sk_rcvlowat) - 188usize];
    ["Offset of field: sock::sk_error_queue"]
        [::std::mem::offset_of!(sock, sk_error_queue) - 192usize];
    ["Offset of field: sock::sk_receive_queue"]
        [::std::mem::offset_of!(sock, sk_receive_queue) - 216usize];
    ["Offset of field: sock::sk_backlog"][::std::mem::offset_of!(sock, sk_backlog) - 240usize];
    ["Offset of field: sock::sk_forward_alloc"]
        [::std::mem::offset_of!(sock, sk_forward_alloc) - 264usize];
    ["Offset of field: sock::sk_reserved_mem"]
        [::std::mem::offset_of!(sock, sk_reserved_mem) - 268usize];
    ["Offset of field: sock::sk_ll_usec"][::std::mem::offset_of!(sock, sk_ll_usec) - 272usize];
    ["Offset of field: sock::sk_napi_id"][::std::mem::offset_of!(sock, sk_napi_id) - 276usize];
    ["Offset of field: sock::sk_rcvbuf"][::std::mem::offset_of!(sock, sk_rcvbuf) - 280usize];
    ["Offset of field: sock::sk_filter"][::std::mem::offset_of!(sock, sk_filter) - 288usize];
    ["Offset of field: sock::sk_policy"][::std::mem::offset_of!(sock, sk_policy) - 304usize];
    ["Offset of field: sock::sk_dst_cache"][::std::mem::offset_of!(sock, sk_dst_cache) - 320usize];
    ["Offset of field: sock::sk_omem_alloc"]
        [::std::mem::offset_of!(sock, sk_omem_alloc) - 328usize];
    ["Offset of field: sock::sk_sndbuf"][::std::mem::offset_of!(sock, sk_sndbuf) - 332usize];
    ["Offset of field: sock::sk_wmem_queued"]
        [::std::mem::offset_of!(sock, sk_wmem_queued) - 336usize];
    ["Offset of field: sock::sk_wmem_alloc"]
        [::std::mem::offset_of!(sock, sk_wmem_alloc) - 340usize];
    ["Offset of field: sock::sk_tsq_flags"][::std::mem::offset_of!(sock, sk_tsq_flags) - 344usize];
    ["Offset of field: sock::sk_write_queue"]
        [::std::mem::offset_of!(sock, sk_write_queue) - 360usize];
    ["Offset of field: sock::sk_peek_off"][::std::mem::offset_of!(sock, sk_peek_off) - 384usize];
    ["Offset of field: sock::sk_write_pending"]
        [::std::mem::offset_of!(sock, sk_write_pending) - 388usize];
    ["Offset of field: sock::sk_dst_pending_confirm"]
        [::std::mem::offset_of!(sock, sk_dst_pending_confirm) - 392usize];
    ["Offset of field: sock::sk_pacing_status"]
        [::std::mem::offset_of!(sock, sk_pacing_status) - 396usize];
    ["Offset of field: sock::sk_sndtimeo"][::std::mem::offset_of!(sock, sk_sndtimeo) - 400usize];
    ["Offset of field: sock::sk_timer"][::std::mem::offset_of!(sock, sk_timer) - 408usize];
    ["Offset of field: sock::sk_priority"][::std::mem::offset_of!(sock, sk_priority) - 448usize];
    ["Offset of field: sock::sk_mark"][::std::mem::offset_of!(sock, sk_mark) - 452usize];
    ["Offset of field: sock::sk_pacing_rate"]
        [::std::mem::offset_of!(sock, sk_pacing_rate) - 456usize];
    ["Offset of field: sock::sk_max_pacing_rate"]
        [::std::mem::offset_of!(sock, sk_max_pacing_rate) - 464usize];
    ["Offset of field: sock::sk_frag"][::std::mem::offset_of!(sock, sk_frag) - 472usize];
    ["Offset of field: sock::sk_route_caps"]
        [::std::mem::offset_of!(sock, sk_route_caps) - 488usize];
    ["Offset of field: sock::sk_gso_type"][::std::mem::offset_of!(sock, sk_gso_type) - 496usize];
    ["Offset of field: sock::sk_gso_max_size"]
        [::std::mem::offset_of!(sock, sk_gso_max_size) - 500usize];
    ["Offset of field: sock::sk_allocation"]
        [::std::mem::offset_of!(sock, sk_allocation) - 504usize];
    ["Offset of field: sock::sk_txhash"][::std::mem::offset_of!(sock, sk_txhash) - 508usize];
    ["Offset of field: sock::sk_pacing_shift"]
        [::std::mem::offset_of!(sock, sk_pacing_shift) - 513usize];
    ["Offset of field: sock::sk_type"][::std::mem::offset_of!(sock, sk_type) - 514usize];
    ["Offset of field: sock::sk_protocol"][::std::mem::offset_of!(sock, sk_protocol) - 516usize];
    ["Offset of field: sock::sk_gso_max_segs"]
        [::std::mem::offset_of!(sock, sk_gso_max_segs) - 518usize];
    ["Offset of field: sock::sk_lingertime"]
        [::std::mem::offset_of!(sock, sk_lingertime) - 520usize];
    ["Offset of field: sock::sk_prot_creator"]
        [::std::mem::offset_of!(sock, sk_prot_creator) - 528usize];
    ["Offset of field: sock::sk_callback_lock"]
        [::std::mem::offset_of!(sock, sk_callback_lock) - 536usize];
    ["Offset of field: sock::sk_err"][::std::mem::offset_of!(sock, sk_err) - 544usize];
    ["Offset of field: sock::sk_err_soft"][::std::mem::offset_of!(sock, sk_err_soft) - 548usize];
    ["Offset of field: sock::sk_ack_backlog"]
        [::std::mem::offset_of!(sock, sk_ack_backlog) - 552usize];
    ["Offset of field: sock::sk_max_ack_backlog"]
        [::std::mem::offset_of!(sock, sk_max_ack_backlog) - 556usize];
    ["Offset of field: sock::sk_uid"][::std::mem::offset_of!(sock, sk_uid) - 560usize];
    ["Offset of field: sock::sk_txrehash"][::std::mem::offset_of!(sock, sk_txrehash) - 564usize];
    ["Offset of field: sock::sk_prefer_busy_poll"]
        [::std::mem::offset_of!(sock, sk_prefer_busy_poll) - 565usize];
    ["Offset of field: sock::sk_busy_poll_budget"]
        [::std::mem::offset_of!(sock, sk_busy_poll_budget) - 566usize];
    ["Offset of field: sock::sk_peer_lock"][::std::mem::offset_of!(sock, sk_peer_lock) - 568usize];
    ["Offset of field: sock::sk_bind_phc"][::std::mem::offset_of!(sock, sk_bind_phc) - 572usize];
    ["Offset of field: sock::sk_peer_pid"][::std::mem::offset_of!(sock, sk_peer_pid) - 576usize];
    ["Offset of field: sock::sk_peer_cred"][::std::mem::offset_of!(sock, sk_peer_cred) - 584usize];
    ["Offset of field: sock::sk_rcvtimeo"][::std::mem::offset_of!(sock, sk_rcvtimeo) - 592usize];
    ["Offset of field: sock::sk_stamp"][::std::mem::offset_of!(sock, sk_stamp) - 600usize];
    ["Offset of field: sock::sk_tskey"][::std::mem::offset_of!(sock, sk_tskey) - 608usize];
    ["Offset of field: sock::sk_zckey"][::std::mem::offset_of!(sock, sk_zckey) - 612usize];
    ["Offset of field: sock::sk_tsflags"][::std::mem::offset_of!(sock, sk_tsflags) - 616usize];
    ["Offset of field: sock::sk_shutdown"][::std::mem::offset_of!(sock, sk_shutdown) - 620usize];
    ["Offset of field: sock::sk_clockid"][::std::mem::offset_of!(sock, sk_clockid) - 621usize];
    ["Offset of field: sock::sk_use_task_frag"]
        [::std::mem::offset_of!(sock, sk_use_task_frag) - 623usize];
    ["Offset of field: sock::sk_socket"][::std::mem::offset_of!(sock, sk_socket) - 624usize];
    ["Offset of field: sock::sk_user_data"][::std::mem::offset_of!(sock, sk_user_data) - 632usize];
    ["Offset of field: sock::sk_security"][::std::mem::offset_of!(sock, sk_security) - 640usize];
    ["Offset of field: sock::sk_cgrp_data"][::std::mem::offset_of!(sock, sk_cgrp_data) - 648usize];
    ["Offset of field: sock::sk_memcg"][::std::mem::offset_of!(sock, sk_memcg) - 664usize];
    ["Offset of field: sock::sk_state_change"]
        [::std::mem::offset_of!(sock, sk_state_change) - 672usize];
    ["Offset of field: sock::sk_data_ready"]
        [::std::mem::offset_of!(sock, sk_data_ready) - 680usize];
    ["Offset of field: sock::sk_write_space"]
        [::std::mem::offset_of!(sock, sk_write_space) - 688usize];
    ["Offset of field: sock::sk_error_report"]
        [::std::mem::offset_of!(sock, sk_error_report) - 696usize];
    ["Offset of field: sock::sk_backlog_rcv"]
        [::std::mem::offset_of!(sock, sk_backlog_rcv) - 704usize];
    ["Offset of field: sock::sk_validate_xmit_skb"]
        [::std::mem::offset_of!(sock, sk_validate_xmit_skb) - 712usize];
    ["Offset of field: sock::sk_destruct"][::std::mem::offset_of!(sock, sk_destruct) - 720usize];
    ["Offset of field: sock::sk_reuseport_cb"]
        [::std::mem::offset_of!(sock, sk_reuseport_cb) - 728usize];
    ["Offset of field: sock::sk_bpf_storage"]
        [::std::mem::offset_of!(sock, sk_bpf_storage) - 736usize];
    ["Offset of field: sock::sk_rcu"][::std::mem::offset_of!(sock, sk_rcu) - 744usize];
    ["Offset of field: sock::ns_tracker"][::std::mem::offset_of!(sock, ns_tracker) - 760usize];
    ["Offset of field: sock::sk_bind2_node"]
        [::std::mem::offset_of!(sock, sk_bind2_node) - 760usize];
};
impl Default for sock {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl sock {
    #[inline]
    pub fn sk_gso_disabled(&self) -> u8_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_sk_gso_disabled(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sk_kern_sock(&self) -> u8_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_sk_kern_sock(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sk_no_check_tx(&self) -> u8_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_sk_no_check_tx(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sk_no_check_rx(&self) -> u8_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_sk_no_check_rx(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sk_userlocks(&self) -> u8_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_sk_userlocks(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sk_gso_disabled: u8_,
        sk_kern_sock: u8_,
        sk_no_check_tx: u8_,
        sk_no_check_rx: u8_,
        sk_userlocks: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let sk_gso_disabled: u8 = unsafe { ::std::mem::transmute(sk_gso_disabled) };
            sk_gso_disabled as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let sk_kern_sock: u8 = unsafe { ::std::mem::transmute(sk_kern_sock) };
            sk_kern_sock as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let sk_no_check_tx: u8 = unsafe { ::std::mem::transmute(sk_no_check_tx) };
            sk_no_check_tx as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let sk_no_check_rx: u8 = unsafe { ::std::mem::transmute(sk_no_check_rx) };
            sk_no_check_rx as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let sk_userlocks: u8 = unsafe { ::std::mem::transmute(sk_userlocks) };
            sk_userlocks as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn sk_txtime_deadline_mode(&self) -> u8_ {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_sk_txtime_deadline_mode(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sk_txtime_report_errors(&self) -> u8_ {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_sk_txtime_report_errors(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sk_txtime_unused(&self) -> u8_ {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_sk_txtime_unused(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        sk_txtime_deadline_mode: u8_,
        sk_txtime_report_errors: u8_,
        sk_txtime_unused: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let sk_txtime_deadline_mode: u8 =
                unsafe { ::std::mem::transmute(sk_txtime_deadline_mode) };
            sk_txtime_deadline_mode as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let sk_txtime_report_errors: u8 =
                unsafe { ::std::mem::transmute(sk_txtime_report_errors) };
            sk_txtime_report_errors as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let sk_txtime_unused: u8 = unsafe { ::std::mem::transmute(sk_txtime_unused) };
            sk_txtime_unused as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netdev_name_node {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dev_ifalias {
    _unused: [u8; 0],
}
pub type xdp_features_t = u32_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct net_device_ops {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xdp_metadata_ops {
    _unused: [u8; 0],
}
pub type atomic_long_t = atomic64_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct net_device_stats {
    pub __bindgen_anon_1: net_device_stats__bindgen_ty_1,
    pub __bindgen_anon_2: net_device_stats__bindgen_ty_2,
    pub __bindgen_anon_3: net_device_stats__bindgen_ty_3,
    pub __bindgen_anon_4: net_device_stats__bindgen_ty_4,
    pub __bindgen_anon_5: net_device_stats__bindgen_ty_5,
    pub __bindgen_anon_6: net_device_stats__bindgen_ty_6,
    pub __bindgen_anon_7: net_device_stats__bindgen_ty_7,
    pub __bindgen_anon_8: net_device_stats__bindgen_ty_8,
    pub __bindgen_anon_9: net_device_stats__bindgen_ty_9,
    pub __bindgen_anon_10: net_device_stats__bindgen_ty_10,
    pub __bindgen_anon_11: net_device_stats__bindgen_ty_11,
    pub __bindgen_anon_12: net_device_stats__bindgen_ty_12,
    pub __bindgen_anon_13: net_device_stats__bindgen_ty_13,
    pub __bindgen_anon_14: net_device_stats__bindgen_ty_14,
    pub __bindgen_anon_15: net_device_stats__bindgen_ty_15,
    pub __bindgen_anon_16: net_device_stats__bindgen_ty_16,
    pub __bindgen_anon_17: net_device_stats__bindgen_ty_17,
    pub __bindgen_anon_18: net_device_stats__bindgen_ty_18,
    pub __bindgen_anon_19: net_device_stats__bindgen_ty_19,
    pub __bindgen_anon_20: net_device_stats__bindgen_ty_20,
    pub __bindgen_anon_21: net_device_stats__bindgen_ty_21,
    pub __bindgen_anon_22: net_device_stats__bindgen_ty_22,
    pub __bindgen_anon_23: net_device_stats__bindgen_ty_23,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device_stats__bindgen_ty_1 {
    pub rx_packets: ::std::os::raw::c_ulong,
    pub __rx_packets: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats__bindgen_ty_1"]
        [::std::mem::size_of::<net_device_stats__bindgen_ty_1>() - 8usize];
    ["Alignment of net_device_stats__bindgen_ty_1"]
        [::std::mem::align_of::<net_device_stats__bindgen_ty_1>() - 8usize];
    ["Offset of field: net_device_stats__bindgen_ty_1::rx_packets"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_1, rx_packets) - 0usize];
    ["Offset of field: net_device_stats__bindgen_ty_1::__rx_packets"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_1, __rx_packets) - 0usize];
};
impl Default for net_device_stats__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device_stats__bindgen_ty_2 {
    pub tx_packets: ::std::os::raw::c_ulong,
    pub __tx_packets: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats__bindgen_ty_2"]
        [::std::mem::size_of::<net_device_stats__bindgen_ty_2>() - 8usize];
    ["Alignment of net_device_stats__bindgen_ty_2"]
        [::std::mem::align_of::<net_device_stats__bindgen_ty_2>() - 8usize];
    ["Offset of field: net_device_stats__bindgen_ty_2::tx_packets"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_2, tx_packets) - 0usize];
    ["Offset of field: net_device_stats__bindgen_ty_2::__tx_packets"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_2, __tx_packets) - 0usize];
};
impl Default for net_device_stats__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device_stats__bindgen_ty_3 {
    pub rx_bytes: ::std::os::raw::c_ulong,
    pub __rx_bytes: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats__bindgen_ty_3"]
        [::std::mem::size_of::<net_device_stats__bindgen_ty_3>() - 8usize];
    ["Alignment of net_device_stats__bindgen_ty_3"]
        [::std::mem::align_of::<net_device_stats__bindgen_ty_3>() - 8usize];
    ["Offset of field: net_device_stats__bindgen_ty_3::rx_bytes"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_3, rx_bytes) - 0usize];
    ["Offset of field: net_device_stats__bindgen_ty_3::__rx_bytes"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_3, __rx_bytes) - 0usize];
};
impl Default for net_device_stats__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device_stats__bindgen_ty_4 {
    pub tx_bytes: ::std::os::raw::c_ulong,
    pub __tx_bytes: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats__bindgen_ty_4"]
        [::std::mem::size_of::<net_device_stats__bindgen_ty_4>() - 8usize];
    ["Alignment of net_device_stats__bindgen_ty_4"]
        [::std::mem::align_of::<net_device_stats__bindgen_ty_4>() - 8usize];
    ["Offset of field: net_device_stats__bindgen_ty_4::tx_bytes"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_4, tx_bytes) - 0usize];
    ["Offset of field: net_device_stats__bindgen_ty_4::__tx_bytes"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_4, __tx_bytes) - 0usize];
};
impl Default for net_device_stats__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device_stats__bindgen_ty_5 {
    pub rx_errors: ::std::os::raw::c_ulong,
    pub __rx_errors: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats__bindgen_ty_5"]
        [::std::mem::size_of::<net_device_stats__bindgen_ty_5>() - 8usize];
    ["Alignment of net_device_stats__bindgen_ty_5"]
        [::std::mem::align_of::<net_device_stats__bindgen_ty_5>() - 8usize];
    ["Offset of field: net_device_stats__bindgen_ty_5::rx_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_5, rx_errors) - 0usize];
    ["Offset of field: net_device_stats__bindgen_ty_5::__rx_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_5, __rx_errors) - 0usize];
};
impl Default for net_device_stats__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device_stats__bindgen_ty_6 {
    pub tx_errors: ::std::os::raw::c_ulong,
    pub __tx_errors: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats__bindgen_ty_6"]
        [::std::mem::size_of::<net_device_stats__bindgen_ty_6>() - 8usize];
    ["Alignment of net_device_stats__bindgen_ty_6"]
        [::std::mem::align_of::<net_device_stats__bindgen_ty_6>() - 8usize];
    ["Offset of field: net_device_stats__bindgen_ty_6::tx_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_6, tx_errors) - 0usize];
    ["Offset of field: net_device_stats__bindgen_ty_6::__tx_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_6, __tx_errors) - 0usize];
};
impl Default for net_device_stats__bindgen_ty_6 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device_stats__bindgen_ty_7 {
    pub rx_dropped: ::std::os::raw::c_ulong,
    pub __rx_dropped: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats__bindgen_ty_7"]
        [::std::mem::size_of::<net_device_stats__bindgen_ty_7>() - 8usize];
    ["Alignment of net_device_stats__bindgen_ty_7"]
        [::std::mem::align_of::<net_device_stats__bindgen_ty_7>() - 8usize];
    ["Offset of field: net_device_stats__bindgen_ty_7::rx_dropped"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_7, rx_dropped) - 0usize];
    ["Offset of field: net_device_stats__bindgen_ty_7::__rx_dropped"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_7, __rx_dropped) - 0usize];
};
impl Default for net_device_stats__bindgen_ty_7 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device_stats__bindgen_ty_8 {
    pub tx_dropped: ::std::os::raw::c_ulong,
    pub __tx_dropped: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats__bindgen_ty_8"]
        [::std::mem::size_of::<net_device_stats__bindgen_ty_8>() - 8usize];
    ["Alignment of net_device_stats__bindgen_ty_8"]
        [::std::mem::align_of::<net_device_stats__bindgen_ty_8>() - 8usize];
    ["Offset of field: net_device_stats__bindgen_ty_8::tx_dropped"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_8, tx_dropped) - 0usize];
    ["Offset of field: net_device_stats__bindgen_ty_8::__tx_dropped"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_8, __tx_dropped) - 0usize];
};
impl Default for net_device_stats__bindgen_ty_8 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device_stats__bindgen_ty_9 {
    pub multicast: ::std::os::raw::c_ulong,
    pub __multicast: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats__bindgen_ty_9"]
        [::std::mem::size_of::<net_device_stats__bindgen_ty_9>() - 8usize];
    ["Alignment of net_device_stats__bindgen_ty_9"]
        [::std::mem::align_of::<net_device_stats__bindgen_ty_9>() - 8usize];
    ["Offset of field: net_device_stats__bindgen_ty_9::multicast"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_9, multicast) - 0usize];
    ["Offset of field: net_device_stats__bindgen_ty_9::__multicast"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_9, __multicast) - 0usize];
};
impl Default for net_device_stats__bindgen_ty_9 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device_stats__bindgen_ty_10 {
    pub collisions: ::std::os::raw::c_ulong,
    pub __collisions: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats__bindgen_ty_10"]
        [::std::mem::size_of::<net_device_stats__bindgen_ty_10>() - 8usize];
    ["Alignment of net_device_stats__bindgen_ty_10"]
        [::std::mem::align_of::<net_device_stats__bindgen_ty_10>() - 8usize];
    ["Offset of field: net_device_stats__bindgen_ty_10::collisions"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_10, collisions) - 0usize];
    ["Offset of field: net_device_stats__bindgen_ty_10::__collisions"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_10, __collisions) - 0usize];
};
impl Default for net_device_stats__bindgen_ty_10 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device_stats__bindgen_ty_11 {
    pub rx_length_errors: ::std::os::raw::c_ulong,
    pub __rx_length_errors: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats__bindgen_ty_11"]
        [::std::mem::size_of::<net_device_stats__bindgen_ty_11>() - 8usize];
    ["Alignment of net_device_stats__bindgen_ty_11"]
        [::std::mem::align_of::<net_device_stats__bindgen_ty_11>() - 8usize];
    ["Offset of field: net_device_stats__bindgen_ty_11::rx_length_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_11, rx_length_errors) - 0usize];
    ["Offset of field: net_device_stats__bindgen_ty_11::__rx_length_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_11, __rx_length_errors) - 0usize];
};
impl Default for net_device_stats__bindgen_ty_11 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device_stats__bindgen_ty_12 {
    pub rx_over_errors: ::std::os::raw::c_ulong,
    pub __rx_over_errors: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats__bindgen_ty_12"]
        [::std::mem::size_of::<net_device_stats__bindgen_ty_12>() - 8usize];
    ["Alignment of net_device_stats__bindgen_ty_12"]
        [::std::mem::align_of::<net_device_stats__bindgen_ty_12>() - 8usize];
    ["Offset of field: net_device_stats__bindgen_ty_12::rx_over_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_12, rx_over_errors) - 0usize];
    ["Offset of field: net_device_stats__bindgen_ty_12::__rx_over_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_12, __rx_over_errors) - 0usize];
};
impl Default for net_device_stats__bindgen_ty_12 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device_stats__bindgen_ty_13 {
    pub rx_crc_errors: ::std::os::raw::c_ulong,
    pub __rx_crc_errors: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats__bindgen_ty_13"]
        [::std::mem::size_of::<net_device_stats__bindgen_ty_13>() - 8usize];
    ["Alignment of net_device_stats__bindgen_ty_13"]
        [::std::mem::align_of::<net_device_stats__bindgen_ty_13>() - 8usize];
    ["Offset of field: net_device_stats__bindgen_ty_13::rx_crc_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_13, rx_crc_errors) - 0usize];
    ["Offset of field: net_device_stats__bindgen_ty_13::__rx_crc_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_13, __rx_crc_errors) - 0usize];
};
impl Default for net_device_stats__bindgen_ty_13 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device_stats__bindgen_ty_14 {
    pub rx_frame_errors: ::std::os::raw::c_ulong,
    pub __rx_frame_errors: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats__bindgen_ty_14"]
        [::std::mem::size_of::<net_device_stats__bindgen_ty_14>() - 8usize];
    ["Alignment of net_device_stats__bindgen_ty_14"]
        [::std::mem::align_of::<net_device_stats__bindgen_ty_14>() - 8usize];
    ["Offset of field: net_device_stats__bindgen_ty_14::rx_frame_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_14, rx_frame_errors) - 0usize];
    ["Offset of field: net_device_stats__bindgen_ty_14::__rx_frame_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_14, __rx_frame_errors) - 0usize];
};
impl Default for net_device_stats__bindgen_ty_14 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device_stats__bindgen_ty_15 {
    pub rx_fifo_errors: ::std::os::raw::c_ulong,
    pub __rx_fifo_errors: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats__bindgen_ty_15"]
        [::std::mem::size_of::<net_device_stats__bindgen_ty_15>() - 8usize];
    ["Alignment of net_device_stats__bindgen_ty_15"]
        [::std::mem::align_of::<net_device_stats__bindgen_ty_15>() - 8usize];
    ["Offset of field: net_device_stats__bindgen_ty_15::rx_fifo_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_15, rx_fifo_errors) - 0usize];
    ["Offset of field: net_device_stats__bindgen_ty_15::__rx_fifo_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_15, __rx_fifo_errors) - 0usize];
};
impl Default for net_device_stats__bindgen_ty_15 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device_stats__bindgen_ty_16 {
    pub rx_missed_errors: ::std::os::raw::c_ulong,
    pub __rx_missed_errors: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats__bindgen_ty_16"]
        [::std::mem::size_of::<net_device_stats__bindgen_ty_16>() - 8usize];
    ["Alignment of net_device_stats__bindgen_ty_16"]
        [::std::mem::align_of::<net_device_stats__bindgen_ty_16>() - 8usize];
    ["Offset of field: net_device_stats__bindgen_ty_16::rx_missed_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_16, rx_missed_errors) - 0usize];
    ["Offset of field: net_device_stats__bindgen_ty_16::__rx_missed_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_16, __rx_missed_errors) - 0usize];
};
impl Default for net_device_stats__bindgen_ty_16 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device_stats__bindgen_ty_17 {
    pub tx_aborted_errors: ::std::os::raw::c_ulong,
    pub __tx_aborted_errors: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats__bindgen_ty_17"]
        [::std::mem::size_of::<net_device_stats__bindgen_ty_17>() - 8usize];
    ["Alignment of net_device_stats__bindgen_ty_17"]
        [::std::mem::align_of::<net_device_stats__bindgen_ty_17>() - 8usize];
    ["Offset of field: net_device_stats__bindgen_ty_17::tx_aborted_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_17, tx_aborted_errors) - 0usize];
    ["Offset of field: net_device_stats__bindgen_ty_17::__tx_aborted_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_17, __tx_aborted_errors) - 0usize];
};
impl Default for net_device_stats__bindgen_ty_17 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device_stats__bindgen_ty_18 {
    pub tx_carrier_errors: ::std::os::raw::c_ulong,
    pub __tx_carrier_errors: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats__bindgen_ty_18"]
        [::std::mem::size_of::<net_device_stats__bindgen_ty_18>() - 8usize];
    ["Alignment of net_device_stats__bindgen_ty_18"]
        [::std::mem::align_of::<net_device_stats__bindgen_ty_18>() - 8usize];
    ["Offset of field: net_device_stats__bindgen_ty_18::tx_carrier_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_18, tx_carrier_errors) - 0usize];
    ["Offset of field: net_device_stats__bindgen_ty_18::__tx_carrier_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_18, __tx_carrier_errors) - 0usize];
};
impl Default for net_device_stats__bindgen_ty_18 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device_stats__bindgen_ty_19 {
    pub tx_fifo_errors: ::std::os::raw::c_ulong,
    pub __tx_fifo_errors: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats__bindgen_ty_19"]
        [::std::mem::size_of::<net_device_stats__bindgen_ty_19>() - 8usize];
    ["Alignment of net_device_stats__bindgen_ty_19"]
        [::std::mem::align_of::<net_device_stats__bindgen_ty_19>() - 8usize];
    ["Offset of field: net_device_stats__bindgen_ty_19::tx_fifo_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_19, tx_fifo_errors) - 0usize];
    ["Offset of field: net_device_stats__bindgen_ty_19::__tx_fifo_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_19, __tx_fifo_errors) - 0usize];
};
impl Default for net_device_stats__bindgen_ty_19 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device_stats__bindgen_ty_20 {
    pub tx_heartbeat_errors: ::std::os::raw::c_ulong,
    pub __tx_heartbeat_errors: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats__bindgen_ty_20"]
        [::std::mem::size_of::<net_device_stats__bindgen_ty_20>() - 8usize];
    ["Alignment of net_device_stats__bindgen_ty_20"]
        [::std::mem::align_of::<net_device_stats__bindgen_ty_20>() - 8usize];
    ["Offset of field: net_device_stats__bindgen_ty_20::tx_heartbeat_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_20, tx_heartbeat_errors) - 0usize];
    ["Offset of field: net_device_stats__bindgen_ty_20::__tx_heartbeat_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_20, __tx_heartbeat_errors) - 0usize];
};
impl Default for net_device_stats__bindgen_ty_20 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device_stats__bindgen_ty_21 {
    pub tx_window_errors: ::std::os::raw::c_ulong,
    pub __tx_window_errors: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats__bindgen_ty_21"]
        [::std::mem::size_of::<net_device_stats__bindgen_ty_21>() - 8usize];
    ["Alignment of net_device_stats__bindgen_ty_21"]
        [::std::mem::align_of::<net_device_stats__bindgen_ty_21>() - 8usize];
    ["Offset of field: net_device_stats__bindgen_ty_21::tx_window_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_21, tx_window_errors) - 0usize];
    ["Offset of field: net_device_stats__bindgen_ty_21::__tx_window_errors"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_21, __tx_window_errors) - 0usize];
};
impl Default for net_device_stats__bindgen_ty_21 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device_stats__bindgen_ty_22 {
    pub rx_compressed: ::std::os::raw::c_ulong,
    pub __rx_compressed: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats__bindgen_ty_22"]
        [::std::mem::size_of::<net_device_stats__bindgen_ty_22>() - 8usize];
    ["Alignment of net_device_stats__bindgen_ty_22"]
        [::std::mem::align_of::<net_device_stats__bindgen_ty_22>() - 8usize];
    ["Offset of field: net_device_stats__bindgen_ty_22::rx_compressed"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_22, rx_compressed) - 0usize];
    ["Offset of field: net_device_stats__bindgen_ty_22::__rx_compressed"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_22, __rx_compressed) - 0usize];
};
impl Default for net_device_stats__bindgen_ty_22 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device_stats__bindgen_ty_23 {
    pub tx_compressed: ::std::os::raw::c_ulong,
    pub __tx_compressed: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats__bindgen_ty_23"]
        [::std::mem::size_of::<net_device_stats__bindgen_ty_23>() - 8usize];
    ["Alignment of net_device_stats__bindgen_ty_23"]
        [::std::mem::align_of::<net_device_stats__bindgen_ty_23>() - 8usize];
    ["Offset of field: net_device_stats__bindgen_ty_23::tx_compressed"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_23, tx_compressed) - 0usize];
    ["Offset of field: net_device_stats__bindgen_ty_23::__tx_compressed"]
        [::std::mem::offset_of!(net_device_stats__bindgen_ty_23, __tx_compressed) - 0usize];
};
impl Default for net_device_stats__bindgen_ty_23 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device_stats"][::std::mem::size_of::<net_device_stats>() - 184usize];
    ["Alignment of net_device_stats"][::std::mem::align_of::<net_device_stats>() - 8usize];
};
impl Default for net_device_stats {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct net_device_core_stats {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iw_handler_def {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iw_public_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ethtool_ops {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct l3mdev_ops {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ndisc_ops {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xfrmdev_ops {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tlsdev_ops {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct header_ops {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netdev_hw_addr_list {
    pub list: list_head,
    pub count: ::std::os::raw::c_int,
    pub tree: rb_root,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of netdev_hw_addr_list"][::std::mem::size_of::<netdev_hw_addr_list>() - 32usize];
    ["Alignment of netdev_hw_addr_list"][::std::mem::align_of::<netdev_hw_addr_list>() - 8usize];
    ["Offset of field: netdev_hw_addr_list::list"]
        [::std::mem::offset_of!(netdev_hw_addr_list, list) - 0usize];
    ["Offset of field: netdev_hw_addr_list::count"]
        [::std::mem::offset_of!(netdev_hw_addr_list, count) - 16usize];
    ["Offset of field: netdev_hw_addr_list::tree"]
        [::std::mem::offset_of!(netdev_hw_addr_list, tree) - 24usize];
};
impl Default for netdev_hw_addr_list {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kset {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_device {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inet6_dev {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vlan_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsa_port {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tipc_bearer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wireless_dev {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpan_dev {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mpls_dev {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mctp_dev {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netdev_rx_queue {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_prog {
    _unused: [u8; 0],
}
pub const rx_handler_result_RX_HANDLER_CONSUMED: rx_handler_result = 0;
pub const rx_handler_result_RX_HANDLER_ANOTHER: rx_handler_result = 1;
pub const rx_handler_result_RX_HANDLER_EXACT: rx_handler_result = 2;
pub const rx_handler_result_RX_HANDLER_PASS: rx_handler_result = 3;
pub type rx_handler_result = ::std::os::raw::c_uint;
pub use self::rx_handler_result as rx_handler_result_t;
pub type rx_handler_func_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut *mut sk_buff) -> rx_handler_result_t>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mini_Qdisc {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netdev_queue {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nf_hook_entries {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_rmap {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Qdisc {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xdp_dev_bulk_queue {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xps_dev_maps {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hlist_head {
    pub first: *mut hlist_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hlist_head"][::std::mem::size_of::<hlist_head>() - 8usize];
    ["Alignment of hlist_head"][::std::mem::align_of::<hlist_head>() - 8usize];
    ["Offset of field: hlist_head::first"][::std::mem::offset_of!(hlist_head, first) - 0usize];
};
impl Default for hlist_head {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ref_tracker_dir {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ref_tracker_dir"][::std::mem::size_of::<ref_tracker_dir>() - 0usize];
    ["Alignment of ref_tracker_dir"][::std::mem::align_of::<ref_tracker_dir>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netpoll_info {
    _unused: [u8; 0],
}
pub const netdev_ml_priv_type_ML_PRIV_NONE: netdev_ml_priv_type = 0;
pub const netdev_ml_priv_type_ML_PRIV_CAN: netdev_ml_priv_type = 1;
pub type netdev_ml_priv_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcpu_lstats {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcpu_sw_netstats {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcpu_dstats {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct garp_port {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrp_port {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dm_hw_stat_delta {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kobj_type {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernfs_node {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct kref {
    pub refcount: refcount_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kref"][::std::mem::size_of::<kref>() - 4usize];
    ["Alignment of kref"][::std::mem::align_of::<kref>() - 4usize];
    ["Offset of field: kref::refcount"][::std::mem::offset_of!(kref, refcount) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kobject {
    pub name: *const ::std::os::raw::c_char,
    pub entry: list_head,
    pub parent: *mut kobject,
    pub kset: *mut kset,
    pub ktype: *const kobj_type,
    pub sd: *mut kernfs_node,
    pub kref: kref,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kobject"][::std::mem::size_of::<kobject>() - 64usize];
    ["Alignment of kobject"][::std::mem::align_of::<kobject>() - 8usize];
    ["Offset of field: kobject::name"][::std::mem::offset_of!(kobject, name) - 0usize];
    ["Offset of field: kobject::entry"][::std::mem::offset_of!(kobject, entry) - 8usize];
    ["Offset of field: kobject::parent"][::std::mem::offset_of!(kobject, parent) - 24usize];
    ["Offset of field: kobject::kset"][::std::mem::offset_of!(kobject, kset) - 32usize];
    ["Offset of field: kobject::ktype"][::std::mem::offset_of!(kobject, ktype) - 40usize];
    ["Offset of field: kobject::sd"][::std::mem::offset_of!(kobject, sd) - 48usize];
    ["Offset of field: kobject::kref"][::std::mem::offset_of!(kobject, kref) - 56usize];
};
impl Default for kobject {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl kobject {
    #[inline]
    pub fn state_initialized(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_state_initialized(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn state_in_sysfs(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_state_in_sysfs(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn state_add_uevent_sent(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_state_add_uevent_sent(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn state_remove_uevent_sent(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_state_remove_uevent_sent(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn uevent_suppress(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uevent_suppress(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        state_initialized: ::std::os::raw::c_uint,
        state_in_sysfs: ::std::os::raw::c_uint,
        state_add_uevent_sent: ::std::os::raw::c_uint,
        state_remove_uevent_sent: ::std::os::raw::c_uint,
        uevent_suppress: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let state_initialized: u32 = unsafe { ::std::mem::transmute(state_initialized) };
            state_initialized as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let state_in_sysfs: u32 = unsafe { ::std::mem::transmute(state_in_sysfs) };
            state_in_sysfs as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let state_add_uevent_sent: u32 =
                unsafe { ::std::mem::transmute(state_add_uevent_sent) };
            state_add_uevent_sent as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let state_remove_uevent_sent: u32 =
                unsafe { ::std::mem::transmute(state_remove_uevent_sent) };
            state_remove_uevent_sent as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let uevent_suppress: u32 = unsafe { ::std::mem::transmute(uevent_suppress) };
            uevent_suppress as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct device_private {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct device_type {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bus_type {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct device_driver {
    _unused: [u8; 0],
}
pub type raw_spinlock_t = raw_spinlock;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct optimistic_spin_queue {
    pub tail: atomic_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of optimistic_spin_queue"][::std::mem::size_of::<optimistic_spin_queue>() - 4usize];
    ["Alignment of optimistic_spin_queue"]
        [::std::mem::align_of::<optimistic_spin_queue>() - 4usize];
    ["Offset of field: optimistic_spin_queue::tail"]
        [::std::mem::offset_of!(optimistic_spin_queue, tail) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mutex {
    pub owner: atomic_long_t,
    pub wait_lock: raw_spinlock_t,
    pub osq: optimistic_spin_queue,
    pub wait_list: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mutex"][::std::mem::size_of::<mutex>() - 32usize];
    ["Alignment of mutex"][::std::mem::align_of::<mutex>() - 8usize];
    ["Offset of field: mutex::owner"][::std::mem::offset_of!(mutex, owner) - 0usize];
    ["Offset of field: mutex::wait_lock"][::std::mem::offset_of!(mutex, wait_lock) - 8usize];
    ["Offset of field: mutex::osq"][::std::mem::offset_of!(mutex, osq) - 12usize];
    ["Offset of field: mutex::wait_list"][::std::mem::offset_of!(mutex, wait_list) - 16usize];
};
impl Default for mutex {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const dl_dev_state_DL_DEV_NO_DRIVER: dl_dev_state = 0;
pub const dl_dev_state_DL_DEV_PROBING: dl_dev_state = 1;
pub const dl_dev_state_DL_DEV_DRIVER_BOUND: dl_dev_state = 2;
pub const dl_dev_state_DL_DEV_UNBINDING: dl_dev_state = 3;
pub type dl_dev_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dev_links_info {
    pub suppliers: list_head,
    pub consumers: list_head,
    pub defer_sync: list_head,
    pub status: dl_dev_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dev_links_info"][::std::mem::size_of::<dev_links_info>() - 56usize];
    ["Alignment of dev_links_info"][::std::mem::align_of::<dev_links_info>() - 8usize];
    ["Offset of field: dev_links_info::suppliers"]
        [::std::mem::offset_of!(dev_links_info, suppliers) - 0usize];
    ["Offset of field: dev_links_info::consumers"]
        [::std::mem::offset_of!(dev_links_info, consumers) - 16usize];
    ["Offset of field: dev_links_info::defer_sync"]
        [::std::mem::offset_of!(dev_links_info, defer_sync) - 32usize];
    ["Offset of field: dev_links_info::status"]
        [::std::mem::offset_of!(dev_links_info, status) - 48usize];
};
impl Default for dev_links_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct pm_message {
    pub event: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pm_message"][::std::mem::size_of::<pm_message>() - 4usize];
    ["Alignment of pm_message"][::std::mem::align_of::<pm_message>() - 4usize];
    ["Offset of field: pm_message::event"][::std::mem::offset_of!(pm_message, event) - 0usize];
};
pub type pm_message_t = pm_message;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct swait_queue_head {
    pub lock: raw_spinlock_t,
    pub task_list: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of swait_queue_head"][::std::mem::size_of::<swait_queue_head>() - 24usize];
    ["Alignment of swait_queue_head"][::std::mem::align_of::<swait_queue_head>() - 8usize];
    ["Offset of field: swait_queue_head::lock"]
        [::std::mem::offset_of!(swait_queue_head, lock) - 0usize];
    ["Offset of field: swait_queue_head::task_list"]
        [::std::mem::offset_of!(swait_queue_head, task_list) - 8usize];
};
impl Default for swait_queue_head {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct completion {
    pub done: ::std::os::raw::c_uint,
    pub wait: swait_queue_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of completion"][::std::mem::size_of::<completion>() - 32usize];
    ["Alignment of completion"][::std::mem::align_of::<completion>() - 8usize];
    ["Offset of field: completion::done"][::std::mem::offset_of!(completion, done) - 0usize];
    ["Offset of field: completion::wait"][::std::mem::offset_of!(completion, wait) - 8usize];
};
impl Default for completion {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wakeup_source {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timerqueue_node {
    pub node: rb_node,
    pub expires: ktime_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timerqueue_node"][::std::mem::size_of::<timerqueue_node>() - 32usize];
    ["Alignment of timerqueue_node"][::std::mem::align_of::<timerqueue_node>() - 8usize];
    ["Offset of field: timerqueue_node::node"]
        [::std::mem::offset_of!(timerqueue_node, node) - 0usize];
    ["Offset of field: timerqueue_node::expires"]
        [::std::mem::offset_of!(timerqueue_node, expires) - 24usize];
};
impl Default for timerqueue_node {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const hrtimer_restart_HRTIMER_NORESTART: hrtimer_restart = 0;
pub const hrtimer_restart_HRTIMER_RESTART: hrtimer_restart = 1;
pub type hrtimer_restart = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hrtimer_clock_base {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hrtimer {
    pub node: timerqueue_node,
    pub _softexpires: ktime_t,
    pub function:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut hrtimer) -> hrtimer_restart>,
    pub base: *mut hrtimer_clock_base,
    pub state: u8_,
    pub is_rel: u8_,
    pub is_soft: u8_,
    pub is_hard: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hrtimer"][::std::mem::size_of::<hrtimer>() - 64usize];
    ["Alignment of hrtimer"][::std::mem::align_of::<hrtimer>() - 8usize];
    ["Offset of field: hrtimer::node"][::std::mem::offset_of!(hrtimer, node) - 0usize];
    ["Offset of field: hrtimer::_softexpires"]
        [::std::mem::offset_of!(hrtimer, _softexpires) - 32usize];
    ["Offset of field: hrtimer::function"][::std::mem::offset_of!(hrtimer, function) - 40usize];
    ["Offset of field: hrtimer::base"][::std::mem::offset_of!(hrtimer, base) - 48usize];
    ["Offset of field: hrtimer::state"][::std::mem::offset_of!(hrtimer, state) - 56usize];
    ["Offset of field: hrtimer::is_rel"][::std::mem::offset_of!(hrtimer, is_rel) - 57usize];
    ["Offset of field: hrtimer::is_soft"][::std::mem::offset_of!(hrtimer, is_soft) - 58usize];
    ["Offset of field: hrtimer::is_hard"][::std::mem::offset_of!(hrtimer, is_hard) - 59usize];
};
impl Default for hrtimer {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type work_func_t = ::std::option::Option<unsafe extern "C" fn(arg1: *mut work_struct)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct work_struct {
    pub data: atomic_long_t,
    pub entry: list_head,
    pub func: work_func_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of work_struct"][::std::mem::size_of::<work_struct>() - 32usize];
    ["Alignment of work_struct"][::std::mem::align_of::<work_struct>() - 8usize];
    ["Offset of field: work_struct::data"][::std::mem::offset_of!(work_struct, data) - 0usize];
    ["Offset of field: work_struct::entry"][::std::mem::offset_of!(work_struct, entry) - 8usize];
    ["Offset of field: work_struct::func"][::std::mem::offset_of!(work_struct, func) - 24usize];
};
impl Default for work_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wake_irq {
    _unused: [u8; 0],
}
pub const rpm_request_RPM_REQ_NONE: rpm_request = 0;
pub const rpm_request_RPM_REQ_IDLE: rpm_request = 1;
pub const rpm_request_RPM_REQ_SUSPEND: rpm_request = 2;
pub const rpm_request_RPM_REQ_AUTOSUSPEND: rpm_request = 3;
pub const rpm_request_RPM_REQ_RESUME: rpm_request = 4;
pub type rpm_request = ::std::os::raw::c_uint;
pub const rpm_status_RPM_INVALID: rpm_status = -1;
pub const rpm_status_RPM_ACTIVE: rpm_status = 0;
pub const rpm_status_RPM_RESUMING: rpm_status = 1;
pub const rpm_status_RPM_SUSPENDED: rpm_status = 2;
pub const rpm_status_RPM_SUSPENDING: rpm_status = 3;
pub type rpm_status = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pm_subsys_data {
    _unused: [u8; 0],
}
pub type s32 = __s32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dev_pm_qos {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dev_pm_info {
    pub power_state: pm_message_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub driver_flags: u32_,
    pub lock: spinlock_t,
    pub entry: list_head,
    pub completion: completion,
    pub wakeup: *mut wakeup_source,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub suspend_timer: hrtimer,
    pub timer_expires: u64_,
    pub work: work_struct,
    pub wait_queue: wait_queue_head_t,
    pub wakeirq: *mut wake_irq,
    pub usage_count: atomic_t,
    pub child_count: atomic_t,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub links_count: ::std::os::raw::c_uint,
    pub request: rpm_request,
    pub runtime_status: rpm_status,
    pub last_status: rpm_status,
    pub runtime_error: ::std::os::raw::c_int,
    pub autosuspend_delay: ::std::os::raw::c_int,
    pub last_busy: u64_,
    pub active_time: u64_,
    pub suspended_time: u64_,
    pub accounting_timestamp: u64_,
    pub subsys_data: *mut pm_subsys_data,
    pub set_latency_tolerance:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut device, arg2: s32)>,
    pub qos: *mut dev_pm_qos,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dev_pm_info"][::std::mem::size_of::<dev_pm_info>() - 312usize];
    ["Alignment of dev_pm_info"][::std::mem::align_of::<dev_pm_info>() - 8usize];
    ["Offset of field: dev_pm_info::power_state"]
        [::std::mem::offset_of!(dev_pm_info, power_state) - 0usize];
    ["Offset of field: dev_pm_info::driver_flags"]
        [::std::mem::offset_of!(dev_pm_info, driver_flags) - 8usize];
    ["Offset of field: dev_pm_info::lock"][::std::mem::offset_of!(dev_pm_info, lock) - 12usize];
    ["Offset of field: dev_pm_info::entry"][::std::mem::offset_of!(dev_pm_info, entry) - 16usize];
    ["Offset of field: dev_pm_info::completion"]
        [::std::mem::offset_of!(dev_pm_info, completion) - 32usize];
    ["Offset of field: dev_pm_info::wakeup"][::std::mem::offset_of!(dev_pm_info, wakeup) - 64usize];
    ["Offset of field: dev_pm_info::suspend_timer"]
        [::std::mem::offset_of!(dev_pm_info, suspend_timer) - 80usize];
    ["Offset of field: dev_pm_info::timer_expires"]
        [::std::mem::offset_of!(dev_pm_info, timer_expires) - 144usize];
    ["Offset of field: dev_pm_info::work"][::std::mem::offset_of!(dev_pm_info, work) - 152usize];
    ["Offset of field: dev_pm_info::wait_queue"]
        [::std::mem::offset_of!(dev_pm_info, wait_queue) - 184usize];
    ["Offset of field: dev_pm_info::wakeirq"]
        [::std::mem::offset_of!(dev_pm_info, wakeirq) - 208usize];
    ["Offset of field: dev_pm_info::usage_count"]
        [::std::mem::offset_of!(dev_pm_info, usage_count) - 216usize];
    ["Offset of field: dev_pm_info::child_count"]
        [::std::mem::offset_of!(dev_pm_info, child_count) - 220usize];
    ["Offset of field: dev_pm_info::links_count"]
        [::std::mem::offset_of!(dev_pm_info, links_count) - 228usize];
    ["Offset of field: dev_pm_info::request"]
        [::std::mem::offset_of!(dev_pm_info, request) - 232usize];
    ["Offset of field: dev_pm_info::runtime_status"]
        [::std::mem::offset_of!(dev_pm_info, runtime_status) - 236usize];
    ["Offset of field: dev_pm_info::last_status"]
        [::std::mem::offset_of!(dev_pm_info, last_status) - 240usize];
    ["Offset of field: dev_pm_info::runtime_error"]
        [::std::mem::offset_of!(dev_pm_info, runtime_error) - 244usize];
    ["Offset of field: dev_pm_info::autosuspend_delay"]
        [::std::mem::offset_of!(dev_pm_info, autosuspend_delay) - 248usize];
    ["Offset of field: dev_pm_info::last_busy"]
        [::std::mem::offset_of!(dev_pm_info, last_busy) - 256usize];
    ["Offset of field: dev_pm_info::active_time"]
        [::std::mem::offset_of!(dev_pm_info, active_time) - 264usize];
    ["Offset of field: dev_pm_info::suspended_time"]
        [::std::mem::offset_of!(dev_pm_info, suspended_time) - 272usize];
    ["Offset of field: dev_pm_info::accounting_timestamp"]
        [::std::mem::offset_of!(dev_pm_info, accounting_timestamp) - 280usize];
    ["Offset of field: dev_pm_info::subsys_data"]
        [::std::mem::offset_of!(dev_pm_info, subsys_data) - 288usize];
    ["Offset of field: dev_pm_info::set_latency_tolerance"]
        [::std::mem::offset_of!(dev_pm_info, set_latency_tolerance) - 296usize];
    ["Offset of field: dev_pm_info::qos"][::std::mem::offset_of!(dev_pm_info, qos) - 304usize];
};
impl Default for dev_pm_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl dev_pm_info {
    #[inline]
    pub fn can_wakeup(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_wakeup(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn async_suspend(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_async_suspend(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_dpm_list(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_in_dpm_list(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_prepared(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_prepared(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_suspended(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_suspended(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_noirq_suspended(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_noirq_suspended(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_late_suspended(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_late_suspended(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_pm(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_pm(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn early_init(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_early_init(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn direct_complete(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_direct_complete(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        can_wakeup: ::std::os::raw::c_uint,
        async_suspend: ::std::os::raw::c_uint,
        in_dpm_list: bool_,
        is_prepared: bool_,
        is_suspended: bool_,
        is_noirq_suspended: bool_,
        is_late_suspended: bool_,
        no_pm: bool_,
        early_init: bool_,
        direct_complete: bool_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let can_wakeup: u32 = unsafe { ::std::mem::transmute(can_wakeup) };
            can_wakeup as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let async_suspend: u32 = unsafe { ::std::mem::transmute(async_suspend) };
            async_suspend as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let in_dpm_list: u8 = unsafe { ::std::mem::transmute(in_dpm_list) };
            in_dpm_list as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let is_prepared: u8 = unsafe { ::std::mem::transmute(is_prepared) };
            is_prepared as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let is_suspended: u8 = unsafe { ::std::mem::transmute(is_suspended) };
            is_suspended as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let is_noirq_suspended: u8 = unsafe { ::std::mem::transmute(is_noirq_suspended) };
            is_noirq_suspended as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let is_late_suspended: u8 = unsafe { ::std::mem::transmute(is_late_suspended) };
            is_late_suspended as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let no_pm: u8 = unsafe { ::std::mem::transmute(no_pm) };
            no_pm as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let early_init: u8 = unsafe { ::std::mem::transmute(early_init) };
            early_init as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let direct_complete: u8 = unsafe { ::std::mem::transmute(direct_complete) };
            direct_complete as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn wakeup_path(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wakeup_path(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn syscore(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_syscore(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_pm_callbacks(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_pm_callbacks(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn must_resume(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_must_resume(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn may_skip_resume(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_may_skip_resume(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        wakeup_path: bool_,
        syscore: bool_,
        no_pm_callbacks: bool_,
        must_resume: ::std::os::raw::c_uint,
        may_skip_resume: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let wakeup_path: u8 = unsafe { ::std::mem::transmute(wakeup_path) };
            wakeup_path as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let syscore: u8 = unsafe { ::std::mem::transmute(syscore) };
            syscore as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let no_pm_callbacks: u8 = unsafe { ::std::mem::transmute(no_pm_callbacks) };
            no_pm_callbacks as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let must_resume: u32 = unsafe { ::std::mem::transmute(must_resume) };
            must_resume as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let may_skip_resume: u32 = unsafe { ::std::mem::transmute(may_skip_resume) };
            may_skip_resume as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn disable_depth(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_disable_depth(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn idle_notification(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_idle_notification(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_3.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn request_pending(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_request_pending(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_3.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deferred_resume(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_deferred_resume(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_3.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn needs_force_resume(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_needs_force_resume(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_3.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn runtime_auto(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_runtime_auto(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_3.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ignore_children(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ignore_children(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_callbacks(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_callbacks(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_3.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn irq_safe(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_irq_safe(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_3.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn use_autosuspend(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_autosuspend(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_3.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn timer_autosuspends(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_timer_autosuspends(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_3.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn memalloc_noio(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_memalloc_noio(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_3.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        disable_depth: ::std::os::raw::c_uint,
        idle_notification: ::std::os::raw::c_uint,
        request_pending: ::std::os::raw::c_uint,
        deferred_resume: ::std::os::raw::c_uint,
        needs_force_resume: ::std::os::raw::c_uint,
        runtime_auto: ::std::os::raw::c_uint,
        ignore_children: bool_,
        no_callbacks: ::std::os::raw::c_uint,
        irq_safe: ::std::os::raw::c_uint,
        use_autosuspend: ::std::os::raw::c_uint,
        timer_autosuspends: ::std::os::raw::c_uint,
        memalloc_noio: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let disable_depth: u32 = unsafe { ::std::mem::transmute(disable_depth) };
            disable_depth as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let idle_notification: u32 = unsafe { ::std::mem::transmute(idle_notification) };
            idle_notification as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let request_pending: u32 = unsafe { ::std::mem::transmute(request_pending) };
            request_pending as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let deferred_resume: u32 = unsafe { ::std::mem::transmute(deferred_resume) };
            deferred_resume as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let needs_force_resume: u32 = unsafe { ::std::mem::transmute(needs_force_resume) };
            needs_force_resume as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let runtime_auto: u32 = unsafe { ::std::mem::transmute(runtime_auto) };
            runtime_auto as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let ignore_children: u8 = unsafe { ::std::mem::transmute(ignore_children) };
            ignore_children as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let no_callbacks: u32 = unsafe { ::std::mem::transmute(no_callbacks) };
            no_callbacks as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let irq_safe: u32 = unsafe { ::std::mem::transmute(irq_safe) };
            irq_safe as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let use_autosuspend: u32 = unsafe { ::std::mem::transmute(use_autosuspend) };
            use_autosuspend as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let timer_autosuspends: u32 = unsafe { ::std::mem::transmute(timer_autosuspends) };
            timer_autosuspends as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let memalloc_noio: u32 = unsafe { ::std::mem::transmute(memalloc_noio) };
            memalloc_noio as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dev_pm_domain {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct em_perf_domain {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dev_pin_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct irq_domain {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msi_device_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dev_msi_info {
    pub domain: *mut irq_domain,
    pub data: *mut msi_device_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dev_msi_info"][::std::mem::size_of::<dev_msi_info>() - 16usize];
    ["Alignment of dev_msi_info"][::std::mem::align_of::<dev_msi_info>() - 8usize];
    ["Offset of field: dev_msi_info::domain"]
        [::std::mem::offset_of!(dev_msi_info, domain) - 0usize];
    ["Offset of field: dev_msi_info::data"][::std::mem::offset_of!(dev_msi_info, data) - 8usize];
};
impl Default for dev_msi_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dma_map_ops {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bus_dma_region {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct device_dma_parameters {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cma {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_tlb_mem {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dev_archdata {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dev_archdata"][::std::mem::size_of::<dev_archdata>() - 0usize];
    ["Alignment of dev_archdata"][::std::mem::align_of::<dev_archdata>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct device_node {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fwnode_handle {
    _unused: [u8; 0],
}
pub type __kernel_dev_t = u32_;
pub type dev_t = __kernel_dev_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attribute_group {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iommu_group {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dev_iommu {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct device_physical_location {
    _unused: [u8; 0],
}
pub const device_removable_DEVICE_REMOVABLE_NOT_SUPPORTED: device_removable = 0;
pub const device_removable_DEVICE_REMOVABLE_UNKNOWN: device_removable = 1;
pub const device_removable_DEVICE_FIXED: device_removable = 2;
pub const device_removable_DEVICE_REMOVABLE: device_removable = 3;
pub type device_removable = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct device {
    pub kobj: kobject,
    pub parent: *mut device,
    pub p: *mut device_private,
    pub init_name: *const ::std::os::raw::c_char,
    pub type_: *const device_type,
    pub bus: *mut bus_type,
    pub driver: *mut device_driver,
    pub platform_data: *mut ::std::os::raw::c_void,
    pub driver_data: *mut ::std::os::raw::c_void,
    pub mutex: mutex,
    pub links: dev_links_info,
    pub power: dev_pm_info,
    pub pm_domain: *mut dev_pm_domain,
    pub em_pd: *mut em_perf_domain,
    pub pins: *mut dev_pin_info,
    pub msi: dev_msi_info,
    pub dma_ops: *const dma_map_ops,
    pub dma_mask: *mut u64_,
    pub coherent_dma_mask: u64_,
    pub bus_dma_limit: u64_,
    pub dma_range_map: *const bus_dma_region,
    pub dma_parms: *mut device_dma_parameters,
    pub dma_pools: list_head,
    pub cma_area: *mut cma,
    pub dma_io_tlb_mem: *mut io_tlb_mem,
    pub archdata: dev_archdata,
    pub of_node: *mut device_node,
    pub fwnode: *mut fwnode_handle,
    pub numa_node: ::std::os::raw::c_int,
    pub devt: dev_t,
    pub id: u32_,
    pub devres_lock: spinlock_t,
    pub devres_head: list_head,
    pub class: *mut class,
    pub groups: *mut *const attribute_group,
    pub release: ::std::option::Option<unsafe extern "C" fn(arg1: *mut device)>,
    pub iommu_group: *mut iommu_group,
    pub iommu: *mut dev_iommu,
    pub physical_location: *mut device_physical_location,
    pub removable: device_removable,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of device"][::std::mem::size_of::<device>() - 752usize];
    ["Alignment of device"][::std::mem::align_of::<device>() - 8usize];
    ["Offset of field: device::kobj"][::std::mem::offset_of!(device, kobj) - 0usize];
    ["Offset of field: device::parent"][::std::mem::offset_of!(device, parent) - 64usize];
    ["Offset of field: device::p"][::std::mem::offset_of!(device, p) - 72usize];
    ["Offset of field: device::init_name"][::std::mem::offset_of!(device, init_name) - 80usize];
    ["Offset of field: device::type_"][::std::mem::offset_of!(device, type_) - 88usize];
    ["Offset of field: device::bus"][::std::mem::offset_of!(device, bus) - 96usize];
    ["Offset of field: device::driver"][::std::mem::offset_of!(device, driver) - 104usize];
    ["Offset of field: device::platform_data"]
        [::std::mem::offset_of!(device, platform_data) - 112usize];
    ["Offset of field: device::driver_data"]
        [::std::mem::offset_of!(device, driver_data) - 120usize];
    ["Offset of field: device::mutex"][::std::mem::offset_of!(device, mutex) - 128usize];
    ["Offset of field: device::links"][::std::mem::offset_of!(device, links) - 160usize];
    ["Offset of field: device::power"][::std::mem::offset_of!(device, power) - 216usize];
    ["Offset of field: device::pm_domain"][::std::mem::offset_of!(device, pm_domain) - 528usize];
    ["Offset of field: device::em_pd"][::std::mem::offset_of!(device, em_pd) - 536usize];
    ["Offset of field: device::pins"][::std::mem::offset_of!(device, pins) - 544usize];
    ["Offset of field: device::msi"][::std::mem::offset_of!(device, msi) - 552usize];
    ["Offset of field: device::dma_ops"][::std::mem::offset_of!(device, dma_ops) - 568usize];
    ["Offset of field: device::dma_mask"][::std::mem::offset_of!(device, dma_mask) - 576usize];
    ["Offset of field: device::coherent_dma_mask"]
        [::std::mem::offset_of!(device, coherent_dma_mask) - 584usize];
    ["Offset of field: device::bus_dma_limit"]
        [::std::mem::offset_of!(device, bus_dma_limit) - 592usize];
    ["Offset of field: device::dma_range_map"]
        [::std::mem::offset_of!(device, dma_range_map) - 600usize];
    ["Offset of field: device::dma_parms"][::std::mem::offset_of!(device, dma_parms) - 608usize];
    ["Offset of field: device::dma_pools"][::std::mem::offset_of!(device, dma_pools) - 616usize];
    ["Offset of field: device::cma_area"][::std::mem::offset_of!(device, cma_area) - 632usize];
    ["Offset of field: device::dma_io_tlb_mem"]
        [::std::mem::offset_of!(device, dma_io_tlb_mem) - 640usize];
    ["Offset of field: device::archdata"][::std::mem::offset_of!(device, archdata) - 648usize];
    ["Offset of field: device::of_node"][::std::mem::offset_of!(device, of_node) - 648usize];
    ["Offset of field: device::fwnode"][::std::mem::offset_of!(device, fwnode) - 656usize];
    ["Offset of field: device::numa_node"][::std::mem::offset_of!(device, numa_node) - 664usize];
    ["Offset of field: device::devt"][::std::mem::offset_of!(device, devt) - 668usize];
    ["Offset of field: device::id"][::std::mem::offset_of!(device, id) - 672usize];
    ["Offset of field: device::devres_lock"]
        [::std::mem::offset_of!(device, devres_lock) - 676usize];
    ["Offset of field: device::devres_head"]
        [::std::mem::offset_of!(device, devres_head) - 680usize];
    ["Offset of field: device::class"][::std::mem::offset_of!(device, class) - 696usize];
    ["Offset of field: device::groups"][::std::mem::offset_of!(device, groups) - 704usize];
    ["Offset of field: device::release"][::std::mem::offset_of!(device, release) - 712usize];
    ["Offset of field: device::iommu_group"]
        [::std::mem::offset_of!(device, iommu_group) - 720usize];
    ["Offset of field: device::iommu"][::std::mem::offset_of!(device, iommu) - 728usize];
    ["Offset of field: device::physical_location"]
        [::std::mem::offset_of!(device, physical_location) - 736usize];
    ["Offset of field: device::removable"][::std::mem::offset_of!(device, removable) - 744usize];
};
impl Default for device {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl device {
    #[inline]
    pub fn offline_disabled(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_offline_disabled(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn offline(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_offline(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn of_node_reused(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_of_node_reused(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn state_synced(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_state_synced(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_match(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_can_match(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        offline_disabled: bool_,
        offline: bool_,
        of_node_reused: bool_,
        state_synced: bool_,
        can_match: bool_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let offline_disabled: u8 = unsafe { ::std::mem::transmute(offline_disabled) };
            offline_disabled as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let offline: u8 = unsafe { ::std::mem::transmute(offline) };
            offline as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let of_node_reused: u8 = unsafe { ::std::mem::transmute(of_node_reused) };
            of_node_reused as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let state_synced: u8 = unsafe { ::std::mem::transmute(state_synced) };
            state_synced as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let can_match: u8 = unsafe { ::std::mem::transmute(can_match) };
            can_match as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtnl_link_ops {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcbnl_rtnl_ops {
    _unused: [u8; 0],
}
pub type __s16 = ::std::os::raw::c_short;
pub type s16 = __s16;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct netdev_tc_txq {
    pub count: u16_,
    pub offset: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of netdev_tc_txq"][::std::mem::size_of::<netdev_tc_txq>() - 4usize];
    ["Alignment of netdev_tc_txq"][::std::mem::align_of::<netdev_tc_txq>() - 2usize];
    ["Offset of field: netdev_tc_txq::count"]
        [::std::mem::offset_of!(netdev_tc_txq, count) - 0usize];
    ["Offset of field: netdev_tc_txq::offset"]
        [::std::mem::offset_of!(netdev_tc_txq, offset) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netprio_map {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct phy_device {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfp_bus {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lock_class_key {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct macsec_ops {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udp_tunnel_nic_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udp_tunnel_nic {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_xdp_link {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_xdp_entity {
    pub prog: *mut bpf_prog,
    pub link: *mut bpf_xdp_link,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_xdp_entity"][::std::mem::size_of::<bpf_xdp_entity>() - 16usize];
    ["Alignment of bpf_xdp_entity"][::std::mem::align_of::<bpf_xdp_entity>() - 8usize];
    ["Offset of field: bpf_xdp_entity::prog"]
        [::std::mem::offset_of!(bpf_xdp_entity, prog) - 0usize];
    ["Offset of field: bpf_xdp_entity::link"]
        [::std::mem::offset_of!(bpf_xdp_entity, link) - 8usize];
};
impl Default for bpf_xdp_entity {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct netdevice_tracker {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of netdevice_tracker"][::std::mem::size_of::<netdevice_tracker>() - 0usize];
    ["Alignment of netdevice_tracker"][::std::mem::align_of::<netdevice_tracker>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtnl_hw_stats64 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct devlink_port {
    _unused: [u8; 0],
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct net_device {
    pub name: [::std::os::raw::c_char; 16usize],
    pub name_node: *mut netdev_name_node,
    pub ifalias: *mut dev_ifalias,
    pub mem_end: ::std::os::raw::c_ulong,
    pub mem_start: ::std::os::raw::c_ulong,
    pub base_addr: ::std::os::raw::c_ulong,
    pub state: ::std::os::raw::c_ulong,
    pub dev_list: list_head,
    pub napi_list: list_head,
    pub unreg_list: list_head,
    pub close_list: list_head,
    pub ptype_all: list_head,
    pub ptype_specific: list_head,
    pub adj_list: net_device__bindgen_ty_1,
    pub flags: ::std::os::raw::c_uint,
    pub xdp_features: xdp_features_t,
    pub priv_flags: ::std::os::raw::c_ulonglong,
    pub netdev_ops: *const net_device_ops,
    pub xdp_metadata_ops: *const xdp_metadata_ops,
    pub ifindex: ::std::os::raw::c_int,
    pub gflags: ::std::os::raw::c_ushort,
    pub hard_header_len: ::std::os::raw::c_ushort,
    pub mtu: ::std::os::raw::c_uint,
    pub needed_headroom: ::std::os::raw::c_ushort,
    pub needed_tailroom: ::std::os::raw::c_ushort,
    pub features: netdev_features_t,
    pub hw_features: netdev_features_t,
    pub wanted_features: netdev_features_t,
    pub vlan_features: netdev_features_t,
    pub hw_enc_features: netdev_features_t,
    pub mpls_features: netdev_features_t,
    pub gso_partial_features: netdev_features_t,
    pub min_mtu: ::std::os::raw::c_uint,
    pub max_mtu: ::std::os::raw::c_uint,
    pub type_: ::std::os::raw::c_ushort,
    pub min_header_len: ::std::os::raw::c_uchar,
    pub name_assign_type: ::std::os::raw::c_uchar,
    pub group: ::std::os::raw::c_int,
    pub stats: net_device_stats,
    pub core_stats: *mut net_device_core_stats,
    pub carrier_up_count: atomic_t,
    pub carrier_down_count: atomic_t,
    pub wireless_handlers: *const iw_handler_def,
    pub wireless_data: *mut iw_public_data,
    pub ethtool_ops: *const ethtool_ops,
    pub l3mdev_ops: *const l3mdev_ops,
    pub ndisc_ops: *const ndisc_ops,
    pub xfrmdev_ops: *const xfrmdev_ops,
    pub tlsdev_ops: *const tlsdev_ops,
    pub header_ops: *const header_ops,
    pub operstate: ::std::os::raw::c_uchar,
    pub link_mode: ::std::os::raw::c_uchar,
    pub if_port: ::std::os::raw::c_uchar,
    pub dma: ::std::os::raw::c_uchar,
    pub perm_addr: [::std::os::raw::c_uchar; 32usize],
    pub addr_assign_type: ::std::os::raw::c_uchar,
    pub addr_len: ::std::os::raw::c_uchar,
    pub upper_level: ::std::os::raw::c_uchar,
    pub lower_level: ::std::os::raw::c_uchar,
    pub neigh_priv_len: ::std::os::raw::c_ushort,
    pub dev_id: ::std::os::raw::c_ushort,
    pub dev_port: ::std::os::raw::c_ushort,
    pub padded: ::std::os::raw::c_ushort,
    pub addr_list_lock: spinlock_t,
    pub irq: ::std::os::raw::c_int,
    pub uc: netdev_hw_addr_list,
    pub mc: netdev_hw_addr_list,
    pub dev_addrs: netdev_hw_addr_list,
    pub queues_kset: *mut kset,
    pub promiscuity: ::std::os::raw::c_uint,
    pub allmulti: ::std::os::raw::c_uint,
    pub uc_promisc: bool_,
    pub ip_ptr: *mut in_device,
    pub ip6_ptr: *mut inet6_dev,
    pub vlan_info: *mut vlan_info,
    pub dsa_ptr: *mut dsa_port,
    pub tipc_ptr: *mut tipc_bearer,
    pub atalk_ptr: *mut ::std::os::raw::c_void,
    pub ax25_ptr: *mut ::std::os::raw::c_void,
    pub ieee80211_ptr: *mut wireless_dev,
    pub ieee802154_ptr: *mut wpan_dev,
    pub mpls_ptr: *mut mpls_dev,
    pub mctp_ptr: *mut mctp_dev,
    pub dev_addr: *const ::std::os::raw::c_uchar,
    pub _rx: *mut netdev_rx_queue,
    pub num_rx_queues: ::std::os::raw::c_uint,
    pub real_num_rx_queues: ::std::os::raw::c_uint,
    pub xdp_prog: *mut bpf_prog,
    pub gro_flush_timeout: ::std::os::raw::c_ulong,
    pub napi_defer_hard_irqs: ::std::os::raw::c_int,
    pub gro_max_size: ::std::os::raw::c_uint,
    pub gro_ipv4_max_size: ::std::os::raw::c_uint,
    pub rx_handler: rx_handler_func_t,
    pub rx_handler_data: *mut ::std::os::raw::c_void,
    pub miniq_ingress: *mut mini_Qdisc,
    pub ingress_queue: *mut netdev_queue,
    pub nf_hooks_ingress: *mut nf_hook_entries,
    pub broadcast: [::std::os::raw::c_uchar; 32usize],
    pub rx_cpu_rmap: *mut cpu_rmap,
    pub index_hlist: hlist_node,
    pub __bindgen_padding_0: [u64; 4usize],
    pub _tx: *mut netdev_queue,
    pub num_tx_queues: ::std::os::raw::c_uint,
    pub real_num_tx_queues: ::std::os::raw::c_uint,
    pub qdisc: *mut Qdisc,
    pub tx_queue_len: ::std::os::raw::c_uint,
    pub tx_global_lock: spinlock_t,
    pub xdp_bulkq: *mut xdp_dev_bulk_queue,
    pub xps_maps: [*mut xps_dev_maps; 2usize],
    pub miniq_egress: *mut mini_Qdisc,
    pub nf_hooks_egress: *mut nf_hook_entries,
    pub qdisc_hash: [hlist_head; 16usize],
    pub watchdog_timer: timer_list,
    pub watchdog_timeo: ::std::os::raw::c_int,
    pub proto_down_reason: u32_,
    pub todo_list: list_head,
    pub pcpu_refcnt: *mut ::std::os::raw::c_int,
    pub refcnt_tracker: ref_tracker_dir,
    pub link_watch_list: list_head,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub dismantle: bool_,
    pub _bitfield_align_2: [u16; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub needs_free_netdev: bool_,
    pub priv_destructor: ::std::option::Option<unsafe extern "C" fn(arg1: *mut net_device)>,
    pub npinfo: *mut netpoll_info,
    pub nd_net: possible_net_t,
    pub ml_priv: *mut ::std::os::raw::c_void,
    pub ml_priv_type: netdev_ml_priv_type,
    pub __bindgen_anon_1: net_device__bindgen_ty_4,
    pub garp_port: *mut garp_port,
    pub mrp_port: *mut mrp_port,
    pub dm_private: *mut dm_hw_stat_delta,
    pub dev: device,
    pub sysfs_groups: [*const attribute_group; 4usize],
    pub sysfs_rx_queue_group: *const attribute_group,
    pub rtnl_link_ops: *const rtnl_link_ops,
    pub gso_max_size: ::std::os::raw::c_uint,
    pub tso_max_size: ::std::os::raw::c_uint,
    pub gso_max_segs: u16_,
    pub tso_max_segs: u16_,
    pub gso_ipv4_max_size: ::std::os::raw::c_uint,
    pub dcbnl_ops: *const dcbnl_rtnl_ops,
    pub num_tc: s16,
    pub tc_to_txq: [netdev_tc_txq; 16usize],
    pub prio_tc_map: [u8_; 16usize],
    pub fcoe_ddp_xid: ::std::os::raw::c_uint,
    pub priomap: *mut netprio_map,
    pub phydev: *mut phy_device,
    pub sfp_bus: *mut sfp_bus,
    pub qdisc_tx_busylock: *mut lock_class_key,
    pub proto_down: bool_,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub net_notifier_list: list_head,
    pub macsec_ops: *const macsec_ops,
    pub udp_tunnel_nic_info: *const udp_tunnel_nic_info,
    pub udp_tunnel_nic: *mut udp_tunnel_nic,
    pub xdp_state: [bpf_xdp_entity; 3usize],
    pub dev_addr_shadow: [u8_; 32usize],
    pub linkwatch_dev_tracker: netdevice_tracker,
    pub watchdog_dev_tracker: netdevice_tracker,
    pub dev_registered_tracker: netdevice_tracker,
    pub offload_xstats_l3: *mut rtnl_hw_stats64,
    pub devlink_port: *mut devlink_port,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct net_device__bindgen_ty_1 {
    pub upper: list_head,
    pub lower: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device__bindgen_ty_1"]
        [::std::mem::size_of::<net_device__bindgen_ty_1>() - 32usize];
    ["Alignment of net_device__bindgen_ty_1"]
        [::std::mem::align_of::<net_device__bindgen_ty_1>() - 8usize];
    ["Offset of field: net_device__bindgen_ty_1::upper"]
        [::std::mem::offset_of!(net_device__bindgen_ty_1, upper) - 0usize];
    ["Offset of field: net_device__bindgen_ty_1::lower"]
        [::std::mem::offset_of!(net_device__bindgen_ty_1, lower) - 16usize];
};
impl Default for net_device__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const net_device_NETREG_UNINITIALIZED: net_device__bindgen_ty_2 = 0;
pub const net_device_NETREG_REGISTERED: net_device__bindgen_ty_2 = 1;
pub const net_device_NETREG_UNREGISTERING: net_device__bindgen_ty_2 = 2;
pub const net_device_NETREG_UNREGISTERED: net_device__bindgen_ty_2 = 3;
pub const net_device_NETREG_RELEASED: net_device__bindgen_ty_2 = 4;
pub const net_device_NETREG_DUMMY: net_device__bindgen_ty_2 = 5;
pub type net_device__bindgen_ty_2 = ::std::os::raw::c_uint;
pub const net_device_RTNL_LINK_INITIALIZED: net_device__bindgen_ty_3 = 0;
pub const net_device_RTNL_LINK_INITIALIZING: net_device__bindgen_ty_3 = 1;
pub type net_device__bindgen_ty_3 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union net_device__bindgen_ty_4 {
    pub lstats: *mut pcpu_lstats,
    pub tstats: *mut pcpu_sw_netstats,
    pub dstats: *mut pcpu_dstats,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device__bindgen_ty_4"]
        [::std::mem::size_of::<net_device__bindgen_ty_4>() - 8usize];
    ["Alignment of net_device__bindgen_ty_4"]
        [::std::mem::align_of::<net_device__bindgen_ty_4>() - 8usize];
    ["Offset of field: net_device__bindgen_ty_4::lstats"]
        [::std::mem::offset_of!(net_device__bindgen_ty_4, lstats) - 0usize];
    ["Offset of field: net_device__bindgen_ty_4::tstats"]
        [::std::mem::offset_of!(net_device__bindgen_ty_4, tstats) - 0usize];
    ["Offset of field: net_device__bindgen_ty_4::dstats"]
        [::std::mem::offset_of!(net_device__bindgen_ty_4, dstats) - 0usize];
};
impl Default for net_device__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of net_device"][::std::mem::size_of::<net_device>() - 2496usize];
    ["Alignment of net_device"][::std::mem::align_of::<net_device>() - 64usize];
    ["Offset of field: net_device::name"][::std::mem::offset_of!(net_device, name) - 0usize];
    ["Offset of field: net_device::name_node"]
        [::std::mem::offset_of!(net_device, name_node) - 16usize];
    ["Offset of field: net_device::ifalias"][::std::mem::offset_of!(net_device, ifalias) - 24usize];
    ["Offset of field: net_device::mem_end"][::std::mem::offset_of!(net_device, mem_end) - 32usize];
    ["Offset of field: net_device::mem_start"]
        [::std::mem::offset_of!(net_device, mem_start) - 40usize];
    ["Offset of field: net_device::base_addr"]
        [::std::mem::offset_of!(net_device, base_addr) - 48usize];
    ["Offset of field: net_device::state"][::std::mem::offset_of!(net_device, state) - 56usize];
    ["Offset of field: net_device::dev_list"]
        [::std::mem::offset_of!(net_device, dev_list) - 64usize];
    ["Offset of field: net_device::napi_list"]
        [::std::mem::offset_of!(net_device, napi_list) - 80usize];
    ["Offset of field: net_device::unreg_list"]
        [::std::mem::offset_of!(net_device, unreg_list) - 96usize];
    ["Offset of field: net_device::close_list"]
        [::std::mem::offset_of!(net_device, close_list) - 112usize];
    ["Offset of field: net_device::ptype_all"]
        [::std::mem::offset_of!(net_device, ptype_all) - 128usize];
    ["Offset of field: net_device::ptype_specific"]
        [::std::mem::offset_of!(net_device, ptype_specific) - 144usize];
    ["Offset of field: net_device::adj_list"]
        [::std::mem::offset_of!(net_device, adj_list) - 160usize];
    ["Offset of field: net_device::flags"][::std::mem::offset_of!(net_device, flags) - 192usize];
    ["Offset of field: net_device::xdp_features"]
        [::std::mem::offset_of!(net_device, xdp_features) - 196usize];
    ["Offset of field: net_device::priv_flags"]
        [::std::mem::offset_of!(net_device, priv_flags) - 200usize];
    ["Offset of field: net_device::netdev_ops"]
        [::std::mem::offset_of!(net_device, netdev_ops) - 208usize];
    ["Offset of field: net_device::xdp_metadata_ops"]
        [::std::mem::offset_of!(net_device, xdp_metadata_ops) - 216usize];
    ["Offset of field: net_device::ifindex"]
        [::std::mem::offset_of!(net_device, ifindex) - 224usize];
    ["Offset of field: net_device::gflags"][::std::mem::offset_of!(net_device, gflags) - 228usize];
    ["Offset of field: net_device::hard_header_len"]
        [::std::mem::offset_of!(net_device, hard_header_len) - 230usize];
    ["Offset of field: net_device::mtu"][::std::mem::offset_of!(net_device, mtu) - 232usize];
    ["Offset of field: net_device::needed_headroom"]
        [::std::mem::offset_of!(net_device, needed_headroom) - 236usize];
    ["Offset of field: net_device::needed_tailroom"]
        [::std::mem::offset_of!(net_device, needed_tailroom) - 238usize];
    ["Offset of field: net_device::features"]
        [::std::mem::offset_of!(net_device, features) - 240usize];
    ["Offset of field: net_device::hw_features"]
        [::std::mem::offset_of!(net_device, hw_features) - 248usize];
    ["Offset of field: net_device::wanted_features"]
        [::std::mem::offset_of!(net_device, wanted_features) - 256usize];
    ["Offset of field: net_device::vlan_features"]
        [::std::mem::offset_of!(net_device, vlan_features) - 264usize];
    ["Offset of field: net_device::hw_enc_features"]
        [::std::mem::offset_of!(net_device, hw_enc_features) - 272usize];
    ["Offset of field: net_device::mpls_features"]
        [::std::mem::offset_of!(net_device, mpls_features) - 280usize];
    ["Offset of field: net_device::gso_partial_features"]
        [::std::mem::offset_of!(net_device, gso_partial_features) - 288usize];
    ["Offset of field: net_device::min_mtu"]
        [::std::mem::offset_of!(net_device, min_mtu) - 296usize];
    ["Offset of field: net_device::max_mtu"]
        [::std::mem::offset_of!(net_device, max_mtu) - 300usize];
    ["Offset of field: net_device::type_"][::std::mem::offset_of!(net_device, type_) - 304usize];
    ["Offset of field: net_device::min_header_len"]
        [::std::mem::offset_of!(net_device, min_header_len) - 306usize];
    ["Offset of field: net_device::name_assign_type"]
        [::std::mem::offset_of!(net_device, name_assign_type) - 307usize];
    ["Offset of field: net_device::group"][::std::mem::offset_of!(net_device, group) - 308usize];
    ["Offset of field: net_device::stats"][::std::mem::offset_of!(net_device, stats) - 312usize];
    ["Offset of field: net_device::core_stats"]
        [::std::mem::offset_of!(net_device, core_stats) - 496usize];
    ["Offset of field: net_device::carrier_up_count"]
        [::std::mem::offset_of!(net_device, carrier_up_count) - 504usize];
    ["Offset of field: net_device::carrier_down_count"]
        [::std::mem::offset_of!(net_device, carrier_down_count) - 508usize];
    ["Offset of field: net_device::wireless_handlers"]
        [::std::mem::offset_of!(net_device, wireless_handlers) - 512usize];
    ["Offset of field: net_device::wireless_data"]
        [::std::mem::offset_of!(net_device, wireless_data) - 520usize];
    ["Offset of field: net_device::ethtool_ops"]
        [::std::mem::offset_of!(net_device, ethtool_ops) - 528usize];
    ["Offset of field: net_device::l3mdev_ops"]
        [::std::mem::offset_of!(net_device, l3mdev_ops) - 536usize];
    ["Offset of field: net_device::ndisc_ops"]
        [::std::mem::offset_of!(net_device, ndisc_ops) - 544usize];
    ["Offset of field: net_device::xfrmdev_ops"]
        [::std::mem::offset_of!(net_device, xfrmdev_ops) - 552usize];
    ["Offset of field: net_device::tlsdev_ops"]
        [::std::mem::offset_of!(net_device, tlsdev_ops) - 560usize];
    ["Offset of field: net_device::header_ops"]
        [::std::mem::offset_of!(net_device, header_ops) - 568usize];
    ["Offset of field: net_device::operstate"]
        [::std::mem::offset_of!(net_device, operstate) - 576usize];
    ["Offset of field: net_device::link_mode"]
        [::std::mem::offset_of!(net_device, link_mode) - 577usize];
    ["Offset of field: net_device::if_port"]
        [::std::mem::offset_of!(net_device, if_port) - 578usize];
    ["Offset of field: net_device::dma"][::std::mem::offset_of!(net_device, dma) - 579usize];
    ["Offset of field: net_device::perm_addr"]
        [::std::mem::offset_of!(net_device, perm_addr) - 580usize];
    ["Offset of field: net_device::addr_assign_type"]
        [::std::mem::offset_of!(net_device, addr_assign_type) - 612usize];
    ["Offset of field: net_device::addr_len"]
        [::std::mem::offset_of!(net_device, addr_len) - 613usize];
    ["Offset of field: net_device::upper_level"]
        [::std::mem::offset_of!(net_device, upper_level) - 614usize];
    ["Offset of field: net_device::lower_level"]
        [::std::mem::offset_of!(net_device, lower_level) - 615usize];
    ["Offset of field: net_device::neigh_priv_len"]
        [::std::mem::offset_of!(net_device, neigh_priv_len) - 616usize];
    ["Offset of field: net_device::dev_id"][::std::mem::offset_of!(net_device, dev_id) - 618usize];
    ["Offset of field: net_device::dev_port"]
        [::std::mem::offset_of!(net_device, dev_port) - 620usize];
    ["Offset of field: net_device::padded"][::std::mem::offset_of!(net_device, padded) - 622usize];
    ["Offset of field: net_device::addr_list_lock"]
        [::std::mem::offset_of!(net_device, addr_list_lock) - 624usize];
    ["Offset of field: net_device::irq"][::std::mem::offset_of!(net_device, irq) - 628usize];
    ["Offset of field: net_device::uc"][::std::mem::offset_of!(net_device, uc) - 632usize];
    ["Offset of field: net_device::mc"][::std::mem::offset_of!(net_device, mc) - 664usize];
    ["Offset of field: net_device::dev_addrs"]
        [::std::mem::offset_of!(net_device, dev_addrs) - 696usize];
    ["Offset of field: net_device::queues_kset"]
        [::std::mem::offset_of!(net_device, queues_kset) - 728usize];
    ["Offset of field: net_device::promiscuity"]
        [::std::mem::offset_of!(net_device, promiscuity) - 736usize];
    ["Offset of field: net_device::allmulti"]
        [::std::mem::offset_of!(net_device, allmulti) - 740usize];
    ["Offset of field: net_device::uc_promisc"]
        [::std::mem::offset_of!(net_device, uc_promisc) - 744usize];
    ["Offset of field: net_device::ip_ptr"][::std::mem::offset_of!(net_device, ip_ptr) - 752usize];
    ["Offset of field: net_device::ip6_ptr"]
        [::std::mem::offset_of!(net_device, ip6_ptr) - 760usize];
    ["Offset of field: net_device::vlan_info"]
        [::std::mem::offset_of!(net_device, vlan_info) - 768usize];
    ["Offset of field: net_device::dsa_ptr"]
        [::std::mem::offset_of!(net_device, dsa_ptr) - 776usize];
    ["Offset of field: net_device::tipc_ptr"]
        [::std::mem::offset_of!(net_device, tipc_ptr) - 784usize];
    ["Offset of field: net_device::atalk_ptr"]
        [::std::mem::offset_of!(net_device, atalk_ptr) - 792usize];
    ["Offset of field: net_device::ax25_ptr"]
        [::std::mem::offset_of!(net_device, ax25_ptr) - 800usize];
    ["Offset of field: net_device::ieee80211_ptr"]
        [::std::mem::offset_of!(net_device, ieee80211_ptr) - 808usize];
    ["Offset of field: net_device::ieee802154_ptr"]
        [::std::mem::offset_of!(net_device, ieee802154_ptr) - 816usize];
    ["Offset of field: net_device::mpls_ptr"]
        [::std::mem::offset_of!(net_device, mpls_ptr) - 824usize];
    ["Offset of field: net_device::mctp_ptr"]
        [::std::mem::offset_of!(net_device, mctp_ptr) - 832usize];
    ["Offset of field: net_device::dev_addr"]
        [::std::mem::offset_of!(net_device, dev_addr) - 840usize];
    ["Offset of field: net_device::_rx"][::std::mem::offset_of!(net_device, _rx) - 848usize];
    ["Offset of field: net_device::num_rx_queues"]
        [::std::mem::offset_of!(net_device, num_rx_queues) - 856usize];
    ["Offset of field: net_device::real_num_rx_queues"]
        [::std::mem::offset_of!(net_device, real_num_rx_queues) - 860usize];
    ["Offset of field: net_device::xdp_prog"]
        [::std::mem::offset_of!(net_device, xdp_prog) - 864usize];
    ["Offset of field: net_device::gro_flush_timeout"]
        [::std::mem::offset_of!(net_device, gro_flush_timeout) - 872usize];
    ["Offset of field: net_device::napi_defer_hard_irqs"]
        [::std::mem::offset_of!(net_device, napi_defer_hard_irqs) - 880usize];
    ["Offset of field: net_device::gro_max_size"]
        [::std::mem::offset_of!(net_device, gro_max_size) - 884usize];
    ["Offset of field: net_device::gro_ipv4_max_size"]
        [::std::mem::offset_of!(net_device, gro_ipv4_max_size) - 888usize];
    ["Offset of field: net_device::rx_handler"]
        [::std::mem::offset_of!(net_device, rx_handler) - 896usize];
    ["Offset of field: net_device::rx_handler_data"]
        [::std::mem::offset_of!(net_device, rx_handler_data) - 904usize];
    ["Offset of field: net_device::miniq_ingress"]
        [::std::mem::offset_of!(net_device, miniq_ingress) - 912usize];
    ["Offset of field: net_device::ingress_queue"]
        [::std::mem::offset_of!(net_device, ingress_queue) - 920usize];
    ["Offset of field: net_device::nf_hooks_ingress"]
        [::std::mem::offset_of!(net_device, nf_hooks_ingress) - 928usize];
    ["Offset of field: net_device::broadcast"]
        [::std::mem::offset_of!(net_device, broadcast) - 936usize];
    ["Offset of field: net_device::rx_cpu_rmap"]
        [::std::mem::offset_of!(net_device, rx_cpu_rmap) - 968usize];
    ["Offset of field: net_device::index_hlist"]
        [::std::mem::offset_of!(net_device, index_hlist) - 976usize];
    ["Offset of field: net_device::_tx"][::std::mem::offset_of!(net_device, _tx) - 1024usize];
    ["Offset of field: net_device::num_tx_queues"]
        [::std::mem::offset_of!(net_device, num_tx_queues) - 1032usize];
    ["Offset of field: net_device::real_num_tx_queues"]
        [::std::mem::offset_of!(net_device, real_num_tx_queues) - 1036usize];
    ["Offset of field: net_device::qdisc"][::std::mem::offset_of!(net_device, qdisc) - 1040usize];
    ["Offset of field: net_device::tx_queue_len"]
        [::std::mem::offset_of!(net_device, tx_queue_len) - 1048usize];
    ["Offset of field: net_device::tx_global_lock"]
        [::std::mem::offset_of!(net_device, tx_global_lock) - 1052usize];
    ["Offset of field: net_device::xdp_bulkq"]
        [::std::mem::offset_of!(net_device, xdp_bulkq) - 1056usize];
    ["Offset of field: net_device::xps_maps"]
        [::std::mem::offset_of!(net_device, xps_maps) - 1064usize];
    ["Offset of field: net_device::miniq_egress"]
        [::std::mem::offset_of!(net_device, miniq_egress) - 1080usize];
    ["Offset of field: net_device::nf_hooks_egress"]
        [::std::mem::offset_of!(net_device, nf_hooks_egress) - 1088usize];
    ["Offset of field: net_device::qdisc_hash"]
        [::std::mem::offset_of!(net_device, qdisc_hash) - 1096usize];
    ["Offset of field: net_device::watchdog_timer"]
        [::std::mem::offset_of!(net_device, watchdog_timer) - 1224usize];
    ["Offset of field: net_device::watchdog_timeo"]
        [::std::mem::offset_of!(net_device, watchdog_timeo) - 1264usize];
    ["Offset of field: net_device::proto_down_reason"]
        [::std::mem::offset_of!(net_device, proto_down_reason) - 1268usize];
    ["Offset of field: net_device::todo_list"]
        [::std::mem::offset_of!(net_device, todo_list) - 1272usize];
    ["Offset of field: net_device::pcpu_refcnt"]
        [::std::mem::offset_of!(net_device, pcpu_refcnt) - 1288usize];
    ["Offset of field: net_device::refcnt_tracker"]
        [::std::mem::offset_of!(net_device, refcnt_tracker) - 1296usize];
    ["Offset of field: net_device::link_watch_list"]
        [::std::mem::offset_of!(net_device, link_watch_list) - 1296usize];
    ["Offset of field: net_device::dismantle"]
        [::std::mem::offset_of!(net_device, dismantle) - 1313usize];
    ["Offset of field: net_device::needs_free_netdev"]
        [::std::mem::offset_of!(net_device, needs_free_netdev) - 1316usize];
    ["Offset of field: net_device::priv_destructor"]
        [::std::mem::offset_of!(net_device, priv_destructor) - 1320usize];
    ["Offset of field: net_device::npinfo"][::std::mem::offset_of!(net_device, npinfo) - 1328usize];
    ["Offset of field: net_device::nd_net"][::std::mem::offset_of!(net_device, nd_net) - 1336usize];
    ["Offset of field: net_device::ml_priv"]
        [::std::mem::offset_of!(net_device, ml_priv) - 1344usize];
    ["Offset of field: net_device::ml_priv_type"]
        [::std::mem::offset_of!(net_device, ml_priv_type) - 1352usize];
    ["Offset of field: net_device::garp_port"]
        [::std::mem::offset_of!(net_device, garp_port) - 1368usize];
    ["Offset of field: net_device::mrp_port"]
        [::std::mem::offset_of!(net_device, mrp_port) - 1376usize];
    ["Offset of field: net_device::dm_private"]
        [::std::mem::offset_of!(net_device, dm_private) - 1384usize];
    ["Offset of field: net_device::dev"][::std::mem::offset_of!(net_device, dev) - 1392usize];
    ["Offset of field: net_device::sysfs_groups"]
        [::std::mem::offset_of!(net_device, sysfs_groups) - 2144usize];
    ["Offset of field: net_device::sysfs_rx_queue_group"]
        [::std::mem::offset_of!(net_device, sysfs_rx_queue_group) - 2176usize];
    ["Offset of field: net_device::rtnl_link_ops"]
        [::std::mem::offset_of!(net_device, rtnl_link_ops) - 2184usize];
    ["Offset of field: net_device::gso_max_size"]
        [::std::mem::offset_of!(net_device, gso_max_size) - 2192usize];
    ["Offset of field: net_device::tso_max_size"]
        [::std::mem::offset_of!(net_device, tso_max_size) - 2196usize];
    ["Offset of field: net_device::gso_max_segs"]
        [::std::mem::offset_of!(net_device, gso_max_segs) - 2200usize];
    ["Offset of field: net_device::tso_max_segs"]
        [::std::mem::offset_of!(net_device, tso_max_segs) - 2202usize];
    ["Offset of field: net_device::gso_ipv4_max_size"]
        [::std::mem::offset_of!(net_device, gso_ipv4_max_size) - 2204usize];
    ["Offset of field: net_device::dcbnl_ops"]
        [::std::mem::offset_of!(net_device, dcbnl_ops) - 2208usize];
    ["Offset of field: net_device::num_tc"][::std::mem::offset_of!(net_device, num_tc) - 2216usize];
    ["Offset of field: net_device::tc_to_txq"]
        [::std::mem::offset_of!(net_device, tc_to_txq) - 2218usize];
    ["Offset of field: net_device::prio_tc_map"]
        [::std::mem::offset_of!(net_device, prio_tc_map) - 2282usize];
    ["Offset of field: net_device::fcoe_ddp_xid"]
        [::std::mem::offset_of!(net_device, fcoe_ddp_xid) - 2300usize];
    ["Offset of field: net_device::priomap"]
        [::std::mem::offset_of!(net_device, priomap) - 2304usize];
    ["Offset of field: net_device::phydev"][::std::mem::offset_of!(net_device, phydev) - 2312usize];
    ["Offset of field: net_device::sfp_bus"]
        [::std::mem::offset_of!(net_device, sfp_bus) - 2320usize];
    ["Offset of field: net_device::qdisc_tx_busylock"]
        [::std::mem::offset_of!(net_device, qdisc_tx_busylock) - 2328usize];
    ["Offset of field: net_device::proto_down"]
        [::std::mem::offset_of!(net_device, proto_down) - 2336usize];
    ["Offset of field: net_device::net_notifier_list"]
        [::std::mem::offset_of!(net_device, net_notifier_list) - 2344usize];
    ["Offset of field: net_device::macsec_ops"]
        [::std::mem::offset_of!(net_device, macsec_ops) - 2360usize];
    ["Offset of field: net_device::udp_tunnel_nic_info"]
        [::std::mem::offset_of!(net_device, udp_tunnel_nic_info) - 2368usize];
    ["Offset of field: net_device::udp_tunnel_nic"]
        [::std::mem::offset_of!(net_device, udp_tunnel_nic) - 2376usize];
    ["Offset of field: net_device::xdp_state"]
        [::std::mem::offset_of!(net_device, xdp_state) - 2384usize];
    ["Offset of field: net_device::dev_addr_shadow"]
        [::std::mem::offset_of!(net_device, dev_addr_shadow) - 2432usize];
    ["Offset of field: net_device::linkwatch_dev_tracker"]
        [::std::mem::offset_of!(net_device, linkwatch_dev_tracker) - 2464usize];
    ["Offset of field: net_device::watchdog_dev_tracker"]
        [::std::mem::offset_of!(net_device, watchdog_dev_tracker) - 2464usize];
    ["Offset of field: net_device::dev_registered_tracker"]
        [::std::mem::offset_of!(net_device, dev_registered_tracker) - 2464usize];
    ["Offset of field: net_device::offload_xstats_l3"]
        [::std::mem::offset_of!(net_device, offload_xstats_l3) - 2464usize];
    ["Offset of field: net_device::devlink_port"]
        [::std::mem::offset_of!(net_device, devlink_port) - 2472usize];
};
impl Default for net_device {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl net_device {
    #[inline]
    pub fn reg_state(&self) -> net_device__bindgen_ty_2 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_reg_state(&mut self, val: net_device__bindgen_ty_2) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reg_state: net_device__bindgen_ty_2,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let reg_state: u32 = unsafe { ::std::mem::transmute(reg_state) };
            reg_state as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn rtnl_link_state(&self) -> net_device__bindgen_ty_3 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_rtnl_link_state(&mut self, val: net_device__bindgen_ty_3) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        rtnl_link_state: net_device__bindgen_ty_3,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let rtnl_link_state: u32 = unsafe { ::std::mem::transmute(rtnl_link_state) };
            rtnl_link_state as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn wol_enabled(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wol_enabled(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn threaded(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_threaded(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_3.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        wol_enabled: ::std::os::raw::c_uint,
        threaded: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let wol_enabled: u32 = unsafe { ::std::mem::transmute(wol_enabled) };
            wol_enabled as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let threaded: u32 = unsafe { ::std::mem::transmute(threaded) };
            threaded as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nf_conntrack {
    pub use_: refcount_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_conntrack"][::std::mem::size_of::<nf_conntrack>() - 4usize];
    ["Alignment of nf_conntrack"][::std::mem::align_of::<nf_conntrack>() - 4usize];
    ["Offset of field: nf_conntrack::use_"][::std::mem::offset_of!(nf_conntrack, use_) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nf_conntrack_zone {
    pub id: u16_,
    pub flags: u8_,
    pub dir: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_conntrack_zone"][::std::mem::size_of::<nf_conntrack_zone>() - 4usize];
    ["Alignment of nf_conntrack_zone"][::std::mem::align_of::<nf_conntrack_zone>() - 2usize];
    ["Offset of field: nf_conntrack_zone::id"]
        [::std::mem::offset_of!(nf_conntrack_zone, id) - 0usize];
    ["Offset of field: nf_conntrack_zone::flags"]
        [::std::mem::offset_of!(nf_conntrack_zone, flags) - 2usize];
    ["Offset of field: nf_conntrack_zone::dir"]
        [::std::mem::offset_of!(nf_conntrack_zone, dir) - 3usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct in_addr {
    pub s_addr: __be32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_addr"][::std::mem::size_of::<in_addr>() - 4usize];
    ["Alignment of in_addr"][::std::mem::align_of::<in_addr>() - 4usize];
    ["Offset of field: in_addr::s_addr"][::std::mem::offset_of!(in_addr, s_addr) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union nf_inet_addr {
    pub all: [__u32; 4usize],
    pub ip: __be32,
    pub ip6: [__be32; 4usize],
    pub in_: in_addr,
    pub in6: in6_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_inet_addr"][::std::mem::size_of::<nf_inet_addr>() - 16usize];
    ["Alignment of nf_inet_addr"][::std::mem::align_of::<nf_inet_addr>() - 4usize];
    ["Offset of field: nf_inet_addr::all"][::std::mem::offset_of!(nf_inet_addr, all) - 0usize];
    ["Offset of field: nf_inet_addr::ip"][::std::mem::offset_of!(nf_inet_addr, ip) - 0usize];
    ["Offset of field: nf_inet_addr::ip6"][::std::mem::offset_of!(nf_inet_addr, ip6) - 0usize];
    ["Offset of field: nf_inet_addr::in_"][::std::mem::offset_of!(nf_inet_addr, in_) - 0usize];
    ["Offset of field: nf_inet_addr::in6"][::std::mem::offset_of!(nf_inet_addr, in6) - 0usize];
};
impl Default for nf_inet_addr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nf_conntrack_man_proto {
    pub all: __be16,
    pub tcp: nf_conntrack_man_proto__bindgen_ty_1,
    pub udp: nf_conntrack_man_proto__bindgen_ty_2,
    pub icmp: nf_conntrack_man_proto__bindgen_ty_3,
    pub dccp: nf_conntrack_man_proto__bindgen_ty_4,
    pub sctp: nf_conntrack_man_proto__bindgen_ty_5,
    pub gre: nf_conntrack_man_proto__bindgen_ty_6,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nf_conntrack_man_proto__bindgen_ty_1 {
    pub port: __be16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_conntrack_man_proto__bindgen_ty_1"]
        [::std::mem::size_of::<nf_conntrack_man_proto__bindgen_ty_1>() - 2usize];
    ["Alignment of nf_conntrack_man_proto__bindgen_ty_1"]
        [::std::mem::align_of::<nf_conntrack_man_proto__bindgen_ty_1>() - 2usize];
    ["Offset of field: nf_conntrack_man_proto__bindgen_ty_1::port"]
        [::std::mem::offset_of!(nf_conntrack_man_proto__bindgen_ty_1, port) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nf_conntrack_man_proto__bindgen_ty_2 {
    pub port: __be16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_conntrack_man_proto__bindgen_ty_2"]
        [::std::mem::size_of::<nf_conntrack_man_proto__bindgen_ty_2>() - 2usize];
    ["Alignment of nf_conntrack_man_proto__bindgen_ty_2"]
        [::std::mem::align_of::<nf_conntrack_man_proto__bindgen_ty_2>() - 2usize];
    ["Offset of field: nf_conntrack_man_proto__bindgen_ty_2::port"]
        [::std::mem::offset_of!(nf_conntrack_man_proto__bindgen_ty_2, port) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nf_conntrack_man_proto__bindgen_ty_3 {
    pub id: __be16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_conntrack_man_proto__bindgen_ty_3"]
        [::std::mem::size_of::<nf_conntrack_man_proto__bindgen_ty_3>() - 2usize];
    ["Alignment of nf_conntrack_man_proto__bindgen_ty_3"]
        [::std::mem::align_of::<nf_conntrack_man_proto__bindgen_ty_3>() - 2usize];
    ["Offset of field: nf_conntrack_man_proto__bindgen_ty_3::id"]
        [::std::mem::offset_of!(nf_conntrack_man_proto__bindgen_ty_3, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nf_conntrack_man_proto__bindgen_ty_4 {
    pub port: __be16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_conntrack_man_proto__bindgen_ty_4"]
        [::std::mem::size_of::<nf_conntrack_man_proto__bindgen_ty_4>() - 2usize];
    ["Alignment of nf_conntrack_man_proto__bindgen_ty_4"]
        [::std::mem::align_of::<nf_conntrack_man_proto__bindgen_ty_4>() - 2usize];
    ["Offset of field: nf_conntrack_man_proto__bindgen_ty_4::port"]
        [::std::mem::offset_of!(nf_conntrack_man_proto__bindgen_ty_4, port) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nf_conntrack_man_proto__bindgen_ty_5 {
    pub port: __be16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_conntrack_man_proto__bindgen_ty_5"]
        [::std::mem::size_of::<nf_conntrack_man_proto__bindgen_ty_5>() - 2usize];
    ["Alignment of nf_conntrack_man_proto__bindgen_ty_5"]
        [::std::mem::align_of::<nf_conntrack_man_proto__bindgen_ty_5>() - 2usize];
    ["Offset of field: nf_conntrack_man_proto__bindgen_ty_5::port"]
        [::std::mem::offset_of!(nf_conntrack_man_proto__bindgen_ty_5, port) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nf_conntrack_man_proto__bindgen_ty_6 {
    pub key: __be16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_conntrack_man_proto__bindgen_ty_6"]
        [::std::mem::size_of::<nf_conntrack_man_proto__bindgen_ty_6>() - 2usize];
    ["Alignment of nf_conntrack_man_proto__bindgen_ty_6"]
        [::std::mem::align_of::<nf_conntrack_man_proto__bindgen_ty_6>() - 2usize];
    ["Offset of field: nf_conntrack_man_proto__bindgen_ty_6::key"]
        [::std::mem::offset_of!(nf_conntrack_man_proto__bindgen_ty_6, key) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_conntrack_man_proto"][::std::mem::size_of::<nf_conntrack_man_proto>() - 2usize];
    ["Alignment of nf_conntrack_man_proto"]
        [::std::mem::align_of::<nf_conntrack_man_proto>() - 2usize];
    ["Offset of field: nf_conntrack_man_proto::all"]
        [::std::mem::offset_of!(nf_conntrack_man_proto, all) - 0usize];
    ["Offset of field: nf_conntrack_man_proto::tcp"]
        [::std::mem::offset_of!(nf_conntrack_man_proto, tcp) - 0usize];
    ["Offset of field: nf_conntrack_man_proto::udp"]
        [::std::mem::offset_of!(nf_conntrack_man_proto, udp) - 0usize];
    ["Offset of field: nf_conntrack_man_proto::icmp"]
        [::std::mem::offset_of!(nf_conntrack_man_proto, icmp) - 0usize];
    ["Offset of field: nf_conntrack_man_proto::dccp"]
        [::std::mem::offset_of!(nf_conntrack_man_proto, dccp) - 0usize];
    ["Offset of field: nf_conntrack_man_proto::sctp"]
        [::std::mem::offset_of!(nf_conntrack_man_proto, sctp) - 0usize];
    ["Offset of field: nf_conntrack_man_proto::gre"]
        [::std::mem::offset_of!(nf_conntrack_man_proto, gre) - 0usize];
};
impl Default for nf_conntrack_man_proto {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type u_int16_t = u16_;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nf_conntrack_man {
    pub u3: nf_inet_addr,
    pub u: nf_conntrack_man_proto,
    pub l3num: u_int16_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_conntrack_man"][::std::mem::size_of::<nf_conntrack_man>() - 20usize];
    ["Alignment of nf_conntrack_man"][::std::mem::align_of::<nf_conntrack_man>() - 4usize];
    ["Offset of field: nf_conntrack_man::u3"]
        [::std::mem::offset_of!(nf_conntrack_man, u3) - 0usize];
    ["Offset of field: nf_conntrack_man::u"][::std::mem::offset_of!(nf_conntrack_man, u) - 16usize];
    ["Offset of field: nf_conntrack_man::l3num"]
        [::std::mem::offset_of!(nf_conntrack_man, l3num) - 18usize];
};
impl Default for nf_conntrack_man {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type u_int8_t = u8_;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nf_conntrack_tuple {
    pub src: nf_conntrack_man,
    pub dst: nf_conntrack_tuple__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nf_conntrack_tuple__bindgen_ty_1 {
    pub u3: nf_inet_addr,
    pub u: nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1,
    pub protonum: u_int8_t,
    pub dir: u_int8_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1 {
    pub all: __be16,
    pub tcp: nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub udp: nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
    pub icmp: nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3,
    pub dccp: nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4,
    pub sctp: nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_5,
    pub gre: nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_6,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub port: __be16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    >() - 2usize];
    ["Alignment of nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()
            - 2usize];
    ["Offset of field: nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::port"][::std::mem::offset_of!(
        nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        port
    )
        - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 {
    pub port: __be16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2"][::std::mem::size_of::<
        nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
    >() - 2usize];
    ["Alignment of nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2>()
            - 2usize];
    ["Offset of field: nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2::port"][::std::mem::offset_of!(
        nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
        port
    )
        - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3 {
    pub type_: u_int8_t,
    pub code: u_int8_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3"][::std::mem::size_of::<
        nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3,
    >() - 2usize];
    ["Alignment of nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3>()
            - 1usize];
    ["Offset of field: nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3::type_"][::std::mem::offset_of!(
        nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3,
        type_
    )
        - 0usize];
    ["Offset of field: nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3::code"][::std::mem::offset_of!(
        nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3,
        code
    )
        - 1usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4 {
    pub port: __be16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4"][::std::mem::size_of::<
        nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4,
    >() - 2usize];
    ["Alignment of nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4>()
            - 2usize];
    ["Offset of field: nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4::port"][::std::mem::offset_of!(
        nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4,
        port
    )
        - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_5 {
    pub port: __be16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_5"][::std::mem::size_of::<
        nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_5,
    >() - 2usize];
    ["Alignment of nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::align_of::<nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_5>()
            - 2usize];
    ["Offset of field: nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_5::port"][::std::mem::offset_of!(
        nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_5,
        port
    )
        - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_6 {
    pub key: __be16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_6"][::std::mem::size_of::<
        nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_6,
    >() - 2usize];
    ["Alignment of nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_6"]
        [::std::mem::align_of::<nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_6>()
            - 2usize];
    ["Offset of field: nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_6::key"][::std::mem::offset_of!(
        nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1__bindgen_ty_6,
        key
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Alignment of nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1::all"]
        [::std::mem::offset_of!(nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1, all) - 0usize];
    ["Offset of field: nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1::tcp"]
        [::std::mem::offset_of!(nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1, tcp) - 0usize];
    ["Offset of field: nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1::udp"]
        [::std::mem::offset_of!(nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1, udp) - 0usize];
    ["Offset of field: nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1::icmp"]
        [::std::mem::offset_of!(nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1, icmp) - 0usize];
    ["Offset of field: nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1::dccp"]
        [::std::mem::offset_of!(nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1, dccp) - 0usize];
    ["Offset of field: nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1::sctp"]
        [::std::mem::offset_of!(nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1, sctp) - 0usize];
    ["Offset of field: nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1::gre"]
        [::std::mem::offset_of!(nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1, gre) - 0usize];
};
impl Default for nf_conntrack_tuple__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_conntrack_tuple__bindgen_ty_1"]
        [::std::mem::size_of::<nf_conntrack_tuple__bindgen_ty_1>() - 20usize];
    ["Alignment of nf_conntrack_tuple__bindgen_ty_1"]
        [::std::mem::align_of::<nf_conntrack_tuple__bindgen_ty_1>() - 4usize];
    ["Offset of field: nf_conntrack_tuple__bindgen_ty_1::u3"]
        [::std::mem::offset_of!(nf_conntrack_tuple__bindgen_ty_1, u3) - 0usize];
    ["Offset of field: nf_conntrack_tuple__bindgen_ty_1::u"]
        [::std::mem::offset_of!(nf_conntrack_tuple__bindgen_ty_1, u) - 16usize];
    ["Offset of field: nf_conntrack_tuple__bindgen_ty_1::protonum"]
        [::std::mem::offset_of!(nf_conntrack_tuple__bindgen_ty_1, protonum) - 18usize];
    ["Offset of field: nf_conntrack_tuple__bindgen_ty_1::dir"]
        [::std::mem::offset_of!(nf_conntrack_tuple__bindgen_ty_1, dir) - 19usize];
};
impl Default for nf_conntrack_tuple__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_conntrack_tuple"][::std::mem::size_of::<nf_conntrack_tuple>() - 40usize];
    ["Alignment of nf_conntrack_tuple"][::std::mem::align_of::<nf_conntrack_tuple>() - 4usize];
    ["Offset of field: nf_conntrack_tuple::src"]
        [::std::mem::offset_of!(nf_conntrack_tuple, src) - 0usize];
    ["Offset of field: nf_conntrack_tuple::dst"]
        [::std::mem::offset_of!(nf_conntrack_tuple, dst) - 20usize];
};
impl Default for nf_conntrack_tuple {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nf_conntrack_tuple_hash {
    pub hnnode: hlist_nulls_node,
    pub tuple: nf_conntrack_tuple,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_conntrack_tuple_hash"][::std::mem::size_of::<nf_conntrack_tuple_hash>() - 56usize];
    ["Alignment of nf_conntrack_tuple_hash"]
        [::std::mem::align_of::<nf_conntrack_tuple_hash>() - 8usize];
    ["Offset of field: nf_conntrack_tuple_hash::hnnode"]
        [::std::mem::offset_of!(nf_conntrack_tuple_hash, hnnode) - 0usize];
    ["Offset of field: nf_conntrack_tuple_hash::tuple"]
        [::std::mem::offset_of!(nf_conntrack_tuple_hash, tuple) - 16usize];
};
impl Default for nf_conntrack_tuple_hash {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type u_int32_t = u32_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nf_ct_ext {
    _unused: [u8; 0],
}
pub type u_int64_t = u64_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nf_ct_dccp {
    pub role: [u_int8_t; 2usize],
    pub state: u_int8_t,
    pub last_pkt: u_int8_t,
    pub last_dir: u_int8_t,
    pub handshake_seq: u_int64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_ct_dccp"][::std::mem::size_of::<nf_ct_dccp>() - 16usize];
    ["Alignment of nf_ct_dccp"][::std::mem::align_of::<nf_ct_dccp>() - 8usize];
    ["Offset of field: nf_ct_dccp::role"][::std::mem::offset_of!(nf_ct_dccp, role) - 0usize];
    ["Offset of field: nf_ct_dccp::state"][::std::mem::offset_of!(nf_ct_dccp, state) - 2usize];
    ["Offset of field: nf_ct_dccp::last_pkt"]
        [::std::mem::offset_of!(nf_ct_dccp, last_pkt) - 3usize];
    ["Offset of field: nf_ct_dccp::last_dir"]
        [::std::mem::offset_of!(nf_ct_dccp, last_dir) - 4usize];
    ["Offset of field: nf_ct_dccp::handshake_seq"]
        [::std::mem::offset_of!(nf_ct_dccp, handshake_seq) - 8usize];
};
pub const sctp_conntrack_SCTP_CONNTRACK_NONE: sctp_conntrack = 0;
pub const sctp_conntrack_SCTP_CONNTRACK_CLOSED: sctp_conntrack = 1;
pub const sctp_conntrack_SCTP_CONNTRACK_COOKIE_WAIT: sctp_conntrack = 2;
pub const sctp_conntrack_SCTP_CONNTRACK_COOKIE_ECHOED: sctp_conntrack = 3;
pub const sctp_conntrack_SCTP_CONNTRACK_ESTABLISHED: sctp_conntrack = 4;
pub const sctp_conntrack_SCTP_CONNTRACK_SHUTDOWN_SENT: sctp_conntrack = 5;
pub const sctp_conntrack_SCTP_CONNTRACK_SHUTDOWN_RECD: sctp_conntrack = 6;
pub const sctp_conntrack_SCTP_CONNTRACK_SHUTDOWN_ACK_SENT: sctp_conntrack = 7;
pub const sctp_conntrack_SCTP_CONNTRACK_HEARTBEAT_SENT: sctp_conntrack = 8;
pub const sctp_conntrack_SCTP_CONNTRACK_HEARTBEAT_ACKED: sctp_conntrack = 9;
pub const sctp_conntrack_SCTP_CONNTRACK_MAX: sctp_conntrack = 10;
pub type sctp_conntrack = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_ct_sctp {
    pub state: sctp_conntrack,
    pub vtag: [__be32; 2usize],
    pub last_dir: u8_,
    pub flags: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_ct_sctp"][::std::mem::size_of::<ip_ct_sctp>() - 16usize];
    ["Alignment of ip_ct_sctp"][::std::mem::align_of::<ip_ct_sctp>() - 4usize];
    ["Offset of field: ip_ct_sctp::state"][::std::mem::offset_of!(ip_ct_sctp, state) - 0usize];
    ["Offset of field: ip_ct_sctp::vtag"][::std::mem::offset_of!(ip_ct_sctp, vtag) - 4usize];
    ["Offset of field: ip_ct_sctp::last_dir"]
        [::std::mem::offset_of!(ip_ct_sctp, last_dir) - 12usize];
    ["Offset of field: ip_ct_sctp::flags"][::std::mem::offset_of!(ip_ct_sctp, flags) - 13usize];
};
impl Default for ip_ct_sctp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ip_ct_tcp_state {
    pub td_end: u_int32_t,
    pub td_maxend: u_int32_t,
    pub td_maxwin: u_int32_t,
    pub td_maxack: u_int32_t,
    pub td_scale: u_int8_t,
    pub flags: u_int8_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_ct_tcp_state"][::std::mem::size_of::<ip_ct_tcp_state>() - 20usize];
    ["Alignment of ip_ct_tcp_state"][::std::mem::align_of::<ip_ct_tcp_state>() - 4usize];
    ["Offset of field: ip_ct_tcp_state::td_end"]
        [::std::mem::offset_of!(ip_ct_tcp_state, td_end) - 0usize];
    ["Offset of field: ip_ct_tcp_state::td_maxend"]
        [::std::mem::offset_of!(ip_ct_tcp_state, td_maxend) - 4usize];
    ["Offset of field: ip_ct_tcp_state::td_maxwin"]
        [::std::mem::offset_of!(ip_ct_tcp_state, td_maxwin) - 8usize];
    ["Offset of field: ip_ct_tcp_state::td_maxack"]
        [::std::mem::offset_of!(ip_ct_tcp_state, td_maxack) - 12usize];
    ["Offset of field: ip_ct_tcp_state::td_scale"]
        [::std::mem::offset_of!(ip_ct_tcp_state, td_scale) - 16usize];
    ["Offset of field: ip_ct_tcp_state::flags"]
        [::std::mem::offset_of!(ip_ct_tcp_state, flags) - 17usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ip_ct_tcp {
    pub seen: [ip_ct_tcp_state; 2usize],
    pub state: u_int8_t,
    pub last_dir: u_int8_t,
    pub retrans: u_int8_t,
    pub last_index: u_int8_t,
    pub last_seq: u_int32_t,
    pub last_ack: u_int32_t,
    pub last_end: u_int32_t,
    pub last_win: u_int16_t,
    pub last_wscale: u_int8_t,
    pub last_flags: u_int8_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_ct_tcp"][::std::mem::size_of::<ip_ct_tcp>() - 60usize];
    ["Alignment of ip_ct_tcp"][::std::mem::align_of::<ip_ct_tcp>() - 4usize];
    ["Offset of field: ip_ct_tcp::seen"][::std::mem::offset_of!(ip_ct_tcp, seen) - 0usize];
    ["Offset of field: ip_ct_tcp::state"][::std::mem::offset_of!(ip_ct_tcp, state) - 40usize];
    ["Offset of field: ip_ct_tcp::last_dir"][::std::mem::offset_of!(ip_ct_tcp, last_dir) - 41usize];
    ["Offset of field: ip_ct_tcp::retrans"][::std::mem::offset_of!(ip_ct_tcp, retrans) - 42usize];
    ["Offset of field: ip_ct_tcp::last_index"]
        [::std::mem::offset_of!(ip_ct_tcp, last_index) - 43usize];
    ["Offset of field: ip_ct_tcp::last_seq"][::std::mem::offset_of!(ip_ct_tcp, last_seq) - 44usize];
    ["Offset of field: ip_ct_tcp::last_ack"][::std::mem::offset_of!(ip_ct_tcp, last_ack) - 48usize];
    ["Offset of field: ip_ct_tcp::last_end"][::std::mem::offset_of!(ip_ct_tcp, last_end) - 52usize];
    ["Offset of field: ip_ct_tcp::last_win"][::std::mem::offset_of!(ip_ct_tcp, last_win) - 56usize];
    ["Offset of field: ip_ct_tcp::last_wscale"]
        [::std::mem::offset_of!(ip_ct_tcp, last_wscale) - 58usize];
    ["Offset of field: ip_ct_tcp::last_flags"]
        [::std::mem::offset_of!(ip_ct_tcp, last_flags) - 59usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nf_ct_udp {
    pub stream_ts: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_ct_udp"][::std::mem::size_of::<nf_ct_udp>() - 8usize];
    ["Alignment of nf_ct_udp"][::std::mem::align_of::<nf_ct_udp>() - 8usize];
    ["Offset of field: nf_ct_udp::stream_ts"]
        [::std::mem::offset_of!(nf_ct_udp, stream_ts) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nf_ct_gre {
    pub stream_timeout: ::std::os::raw::c_uint,
    pub timeout: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_ct_gre"][::std::mem::size_of::<nf_ct_gre>() - 8usize];
    ["Alignment of nf_ct_gre"][::std::mem::align_of::<nf_ct_gre>() - 4usize];
    ["Offset of field: nf_ct_gre::stream_timeout"]
        [::std::mem::offset_of!(nf_ct_gre, stream_timeout) - 0usize];
    ["Offset of field: nf_ct_gre::timeout"][::std::mem::offset_of!(nf_ct_gre, timeout) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union nf_conntrack_proto {
    pub dccp: nf_ct_dccp,
    pub sctp: ip_ct_sctp,
    pub tcp: ip_ct_tcp,
    pub udp: nf_ct_udp,
    pub gre: nf_ct_gre,
    pub tmpl_padto: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_conntrack_proto"][::std::mem::size_of::<nf_conntrack_proto>() - 64usize];
    ["Alignment of nf_conntrack_proto"][::std::mem::align_of::<nf_conntrack_proto>() - 8usize];
    ["Offset of field: nf_conntrack_proto::dccp"]
        [::std::mem::offset_of!(nf_conntrack_proto, dccp) - 0usize];
    ["Offset of field: nf_conntrack_proto::sctp"]
        [::std::mem::offset_of!(nf_conntrack_proto, sctp) - 0usize];
    ["Offset of field: nf_conntrack_proto::tcp"]
        [::std::mem::offset_of!(nf_conntrack_proto, tcp) - 0usize];
    ["Offset of field: nf_conntrack_proto::udp"]
        [::std::mem::offset_of!(nf_conntrack_proto, udp) - 0usize];
    ["Offset of field: nf_conntrack_proto::gre"]
        [::std::mem::offset_of!(nf_conntrack_proto, gre) - 0usize];
    ["Offset of field: nf_conntrack_proto::tmpl_padto"]
        [::std::mem::offset_of!(nf_conntrack_proto, tmpl_padto) - 0usize];
};
impl Default for nf_conntrack_proto {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nf_conn {
    pub ct_general: nf_conntrack,
    pub lock: spinlock_t,
    pub timeout: u32_,
    pub zone: nf_conntrack_zone,
    pub tuplehash: [nf_conntrack_tuple_hash; 2usize],
    pub status: ::std::os::raw::c_ulong,
    pub ct_net: possible_net_t,
    pub nat_bysource: hlist_node,
    pub __nfct_init_offset: nf_conn__bindgen_ty_1,
    pub master: *mut nf_conn,
    pub mark: u_int32_t,
    pub secmark: u_int32_t,
    pub ext: *mut nf_ct_ext,
    pub proto: nf_conntrack_proto,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nf_conn__bindgen_ty_1 {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_conn__bindgen_ty_1"][::std::mem::size_of::<nf_conn__bindgen_ty_1>() - 0usize];
    ["Alignment of nf_conn__bindgen_ty_1"]
        [::std::mem::align_of::<nf_conn__bindgen_ty_1>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nf_conn"][::std::mem::size_of::<nf_conn>() - 248usize];
    ["Alignment of nf_conn"][::std::mem::align_of::<nf_conn>() - 8usize];
    ["Offset of field: nf_conn::ct_general"][::std::mem::offset_of!(nf_conn, ct_general) - 0usize];
    ["Offset of field: nf_conn::lock"][::std::mem::offset_of!(nf_conn, lock) - 4usize];
    ["Offset of field: nf_conn::timeout"][::std::mem::offset_of!(nf_conn, timeout) - 8usize];
    ["Offset of field: nf_conn::zone"][::std::mem::offset_of!(nf_conn, zone) - 12usize];
    ["Offset of field: nf_conn::tuplehash"][::std::mem::offset_of!(nf_conn, tuplehash) - 16usize];
    ["Offset of field: nf_conn::status"][::std::mem::offset_of!(nf_conn, status) - 128usize];
    ["Offset of field: nf_conn::ct_net"][::std::mem::offset_of!(nf_conn, ct_net) - 136usize];
    ["Offset of field: nf_conn::nat_bysource"]
        [::std::mem::offset_of!(nf_conn, nat_bysource) - 144usize];
    ["Offset of field: nf_conn::__nfct_init_offset"]
        [::std::mem::offset_of!(nf_conn, __nfct_init_offset) - 160usize];
    ["Offset of field: nf_conn::master"][::std::mem::offset_of!(nf_conn, master) - 160usize];
    ["Offset of field: nf_conn::mark"][::std::mem::offset_of!(nf_conn, mark) - 168usize];
    ["Offset of field: nf_conn::secmark"][::std::mem::offset_of!(nf_conn, secmark) - 172usize];
    ["Offset of field: nf_conn::ext"][::std::mem::offset_of!(nf_conn, ext) - 176usize];
    ["Offset of field: nf_conn::proto"][::std::mem::offset_of!(nf_conn, proto) - 184usize];
};
impl Default for nf_conn {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
